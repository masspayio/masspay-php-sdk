<?php
/**
 * UserApi
 * PHP version 7.4
 *
 * @category Class
 * @package  MassPayPhpSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MassPay API
 *
 * MassPay API
 *
 * The version of the OpenAPI document: 0.1.4
 * Contact: info@masspay.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MassPayPhpSdk\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use MassPayPhpSdk\ApiException;
use MassPayPhpSdk\Configuration;
use MassPayPhpSdk\HeaderSelector;
use MassPayPhpSdk\ObjectSerializer;

/**
 * UserApi Class Doc Comment
 *
 * @category Class
 * @package  MassPayPhpSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class UserApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createUser' => [
            'application/json',
        ],
        'getUserByToken' => [
            'application/json',
        ],
        'getUserHistory' => [
            'application/json',
        ],
        'getUserUserTokenKycAu10tix' => [
            'application/json',
        ],
        'getUserUserTokenKycVeriiff' => [
            'application/json',
        ],
        'updateUser' => [
            'application/json',
        ],
        'userLookup' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createUser
     *
     * Create a user
     *
     * @param  \MassPayPhpSdk\Model\User $user Created user object (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createUser'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MassPayPhpSdk\Model\StoredUser|\MassPayPhpSdk\Model\Exception
     */
    public function createUser($user, string $contentType = self::contentTypes['createUser'][0])
    {
        list($response) = $this->createUserWithHttpInfo($user, $contentType);
        return $response;
    }

    /**
     * Operation createUserWithHttpInfo
     *
     * Create a user
     *
     * @param  \MassPayPhpSdk\Model\User $user Created user object (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createUser'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MassPayPhpSdk\Model\StoredUser|\MassPayPhpSdk\Model\Exception, HTTP status code, HTTP response headers (array of strings)
     */
    public function createUserWithHttpInfo($user, string $contentType = self::contentTypes['createUser'][0])
    {
        $request = $this->createUserRequest($user, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MassPayPhpSdk\Model\StoredUser' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MassPayPhpSdk\Model\StoredUser' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MassPayPhpSdk\Model\StoredUser', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\MassPayPhpSdk\Model\Exception' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MassPayPhpSdk\Model\Exception' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MassPayPhpSdk\Model\Exception', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MassPayPhpSdk\Model\StoredUser';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MassPayPhpSdk\Model\StoredUser',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MassPayPhpSdk\Model\Exception',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createUserAsync
     *
     * Create a user
     *
     * @param  \MassPayPhpSdk\Model\User $user Created user object (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createUserAsync($user, string $contentType = self::contentTypes['createUser'][0])
    {
        return $this->createUserAsyncWithHttpInfo($user, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createUserAsyncWithHttpInfo
     *
     * Create a user
     *
     * @param  \MassPayPhpSdk\Model\User $user Created user object (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createUserAsyncWithHttpInfo($user, string $contentType = self::contentTypes['createUser'][0])
    {
        $returnType = '\MassPayPhpSdk\Model\StoredUser';
        $request = $this->createUserRequest($user, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createUser'
     *
     * @param  \MassPayPhpSdk\Model\User $user Created user object (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createUserRequest($user, string $contentType = self::contentTypes['createUser'][0])
    {

        // verify the required parameter 'user' is set
        if ($user === null || (is_array($user) && count($user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user when calling createUser'
            );
        }


        $resourcePath = '/user';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($user)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($user));
            } else {
                $httpBody = $user;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUserByToken
     *
     * Get user by user token
     *
     * @param  string $user_token The user token that needs to be fetched. (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserByToken'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MassPayPhpSdk\Model\StoredUser
     */
    public function getUserByToken($user_token, $idempotency_key = null, string $contentType = self::contentTypes['getUserByToken'][0])
    {
        list($response) = $this->getUserByTokenWithHttpInfo($user_token, $idempotency_key, $contentType);
        return $response;
    }

    /**
     * Operation getUserByTokenWithHttpInfo
     *
     * Get user by user token
     *
     * @param  string $user_token The user token that needs to be fetched. (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserByToken'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MassPayPhpSdk\Model\StoredUser, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUserByTokenWithHttpInfo($user_token, $idempotency_key = null, string $contentType = self::contentTypes['getUserByToken'][0])
    {
        $request = $this->getUserByTokenRequest($user_token, $idempotency_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MassPayPhpSdk\Model\StoredUser' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MassPayPhpSdk\Model\StoredUser' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MassPayPhpSdk\Model\StoredUser', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MassPayPhpSdk\Model\StoredUser';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MassPayPhpSdk\Model\StoredUser',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUserByTokenAsync
     *
     * Get user by user token
     *
     * @param  string $user_token The user token that needs to be fetched. (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserByToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserByTokenAsync($user_token, $idempotency_key = null, string $contentType = self::contentTypes['getUserByToken'][0])
    {
        return $this->getUserByTokenAsyncWithHttpInfo($user_token, $idempotency_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUserByTokenAsyncWithHttpInfo
     *
     * Get user by user token
     *
     * @param  string $user_token The user token that needs to be fetched. (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserByToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserByTokenAsyncWithHttpInfo($user_token, $idempotency_key = null, string $contentType = self::contentTypes['getUserByToken'][0])
    {
        $returnType = '\MassPayPhpSdk\Model\StoredUser';
        $request = $this->getUserByTokenRequest($user_token, $idempotency_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUserByToken'
     *
     * @param  string $user_token The user token that needs to be fetched. (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserByToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUserByTokenRequest($user_token, $idempotency_key = null, string $contentType = self::contentTypes['getUserByToken'][0])
    {

        // verify the required parameter 'user_token' is set
        if ($user_token === null || (is_array($user_token) && count($user_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_token when calling getUserByToken'
            );
        }



        $resourcePath = '/user/{user_token}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($idempotency_key !== null) {
            $headerParams['Idempotency-Key'] = ObjectSerializer::toHeaderValue($idempotency_key);
        }

        // path params
        if ($user_token !== null) {
            $resourcePath = str_replace(
                '{' . 'user_token' . '}',
                ObjectSerializer::toPathValue($user_token),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUserHistory
     *
     * Transactions history
     *
     * @param  string $user_token Token representing the user to get transactions history for (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  float $number_of_records Number of records to return (optional, default to 10)
     * @param  \DateTime $start_date Starting date (optional)
     * @param  \DateTime $end_date Ending date (optional)
     * @param  int $page Page number (optional, default to 1)
     * @param  string $type Filter particular types of transactions. Comma separated to include multiple types (optional)
     * @param  string $wallet_token Filter transactions to include only provided wallet token. (optional)
     * @param  bool $show_all_clients Wether to show transactions from all clients (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserHistory'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MassPayPhpSdk\Model\TxnHistoryResp[]
     */
    public function getUserHistory($user_token, $idempotency_key = null, $number_of_records = 10, $start_date = null, $end_date = null, $page = 1, $type = null, $wallet_token = null, $show_all_clients = false, string $contentType = self::contentTypes['getUserHistory'][0])
    {
        list($response) = $this->getUserHistoryWithHttpInfo($user_token, $idempotency_key, $number_of_records, $start_date, $end_date, $page, $type, $wallet_token, $show_all_clients, $contentType);
        return $response;
    }

    /**
     * Operation getUserHistoryWithHttpInfo
     *
     * Transactions history
     *
     * @param  string $user_token Token representing the user to get transactions history for (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  float $number_of_records Number of records to return (optional, default to 10)
     * @param  \DateTime $start_date Starting date (optional)
     * @param  \DateTime $end_date Ending date (optional)
     * @param  int $page Page number (optional, default to 1)
     * @param  string $type Filter particular types of transactions. Comma separated to include multiple types (optional)
     * @param  string $wallet_token Filter transactions to include only provided wallet token. (optional)
     * @param  bool $show_all_clients Wether to show transactions from all clients (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserHistory'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MassPayPhpSdk\Model\TxnHistoryResp[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getUserHistoryWithHttpInfo($user_token, $idempotency_key = null, $number_of_records = 10, $start_date = null, $end_date = null, $page = 1, $type = null, $wallet_token = null, $show_all_clients = false, string $contentType = self::contentTypes['getUserHistory'][0])
    {
        $request = $this->getUserHistoryRequest($user_token, $idempotency_key, $number_of_records, $start_date, $end_date, $page, $type, $wallet_token, $show_all_clients, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MassPayPhpSdk\Model\TxnHistoryResp[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MassPayPhpSdk\Model\TxnHistoryResp[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MassPayPhpSdk\Model\TxnHistoryResp[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MassPayPhpSdk\Model\TxnHistoryResp[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MassPayPhpSdk\Model\TxnHistoryResp[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUserHistoryAsync
     *
     * Transactions history
     *
     * @param  string $user_token Token representing the user to get transactions history for (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  float $number_of_records Number of records to return (optional, default to 10)
     * @param  \DateTime $start_date Starting date (optional)
     * @param  \DateTime $end_date Ending date (optional)
     * @param  int $page Page number (optional, default to 1)
     * @param  string $type Filter particular types of transactions. Comma separated to include multiple types (optional)
     * @param  string $wallet_token Filter transactions to include only provided wallet token. (optional)
     * @param  bool $show_all_clients Wether to show transactions from all clients (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserHistory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserHistoryAsync($user_token, $idempotency_key = null, $number_of_records = 10, $start_date = null, $end_date = null, $page = 1, $type = null, $wallet_token = null, $show_all_clients = false, string $contentType = self::contentTypes['getUserHistory'][0])
    {
        return $this->getUserHistoryAsyncWithHttpInfo($user_token, $idempotency_key, $number_of_records, $start_date, $end_date, $page, $type, $wallet_token, $show_all_clients, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUserHistoryAsyncWithHttpInfo
     *
     * Transactions history
     *
     * @param  string $user_token Token representing the user to get transactions history for (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  float $number_of_records Number of records to return (optional, default to 10)
     * @param  \DateTime $start_date Starting date (optional)
     * @param  \DateTime $end_date Ending date (optional)
     * @param  int $page Page number (optional, default to 1)
     * @param  string $type Filter particular types of transactions. Comma separated to include multiple types (optional)
     * @param  string $wallet_token Filter transactions to include only provided wallet token. (optional)
     * @param  bool $show_all_clients Wether to show transactions from all clients (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserHistory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserHistoryAsyncWithHttpInfo($user_token, $idempotency_key = null, $number_of_records = 10, $start_date = null, $end_date = null, $page = 1, $type = null, $wallet_token = null, $show_all_clients = false, string $contentType = self::contentTypes['getUserHistory'][0])
    {
        $returnType = '\MassPayPhpSdk\Model\TxnHistoryResp[]';
        $request = $this->getUserHistoryRequest($user_token, $idempotency_key, $number_of_records, $start_date, $end_date, $page, $type, $wallet_token, $show_all_clients, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUserHistory'
     *
     * @param  string $user_token Token representing the user to get transactions history for (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  float $number_of_records Number of records to return (optional, default to 10)
     * @param  \DateTime $start_date Starting date (optional)
     * @param  \DateTime $end_date Ending date (optional)
     * @param  int $page Page number (optional, default to 1)
     * @param  string $type Filter particular types of transactions. Comma separated to include multiple types (optional)
     * @param  string $wallet_token Filter transactions to include only provided wallet token. (optional)
     * @param  bool $show_all_clients Wether to show transactions from all clients (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserHistory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUserHistoryRequest($user_token, $idempotency_key = null, $number_of_records = 10, $start_date = null, $end_date = null, $page = 1, $type = null, $wallet_token = null, $show_all_clients = false, string $contentType = self::contentTypes['getUserHistory'][0])
    {

        // verify the required parameter 'user_token' is set
        if ($user_token === null || (is_array($user_token) && count($user_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_token when calling getUserHistory'
            );
        }



        if ($start_date !== null && !preg_match("/^[\\d]{4}-[\\d]{2}-[\\d]{2}$/", $start_date)) {
            throw new \InvalidArgumentException("invalid value for \"start_date\" when calling UserApi.getUserHistory, must conform to the pattern /^[\\d]{4}-[\\d]{2}-[\\d]{2}$/.");
        }
        
        if ($end_date !== null && !preg_match("/^[\\d]{4}-[\\d]{2}-[\\d]{2}$/", $end_date)) {
            throw new \InvalidArgumentException("invalid value for \"end_date\" when calling UserApi.getUserHistory, must conform to the pattern /^[\\d]{4}-[\\d]{2}-[\\d]{2}$/.");
        }
        
        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling UserApi.getUserHistory, must be bigger than or equal to 1.');
        }
        




        $resourcePath = '/user/{user_token}/history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number_of_records,
            'number_of_records', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_date,
            'start_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_date,
            'end_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $wallet_token,
            'wallet_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $show_all_clients,
            'show_all_clients', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($idempotency_key !== null) {
            $headerParams['Idempotency-Key'] = ObjectSerializer::toHeaderValue($idempotency_key);
        }

        // path params
        if ($user_token !== null) {
            $resourcePath = str_replace(
                '{' . 'user_token' . '}',
                ObjectSerializer::toPathValue($user_token),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUserUserTokenKycAu10tix
     *
     * Get an Au10tix session link
     *
     * @param  string $user_token user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserUserTokenKycAu10tix'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MassPayPhpSdk\Model\GetUserUserTokenKycAu10tix200Response
     */
    public function getUserUserTokenKycAu10tix($user_token, string $contentType = self::contentTypes['getUserUserTokenKycAu10tix'][0])
    {
        list($response) = $this->getUserUserTokenKycAu10tixWithHttpInfo($user_token, $contentType);
        return $response;
    }

    /**
     * Operation getUserUserTokenKycAu10tixWithHttpInfo
     *
     * Get an Au10tix session link
     *
     * @param  string $user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserUserTokenKycAu10tix'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MassPayPhpSdk\Model\GetUserUserTokenKycAu10tix200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUserUserTokenKycAu10tixWithHttpInfo($user_token, string $contentType = self::contentTypes['getUserUserTokenKycAu10tix'][0])
    {
        $request = $this->getUserUserTokenKycAu10tixRequest($user_token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MassPayPhpSdk\Model\GetUserUserTokenKycAu10tix200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MassPayPhpSdk\Model\GetUserUserTokenKycAu10tix200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MassPayPhpSdk\Model\GetUserUserTokenKycAu10tix200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MassPayPhpSdk\Model\GetUserUserTokenKycAu10tix200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MassPayPhpSdk\Model\GetUserUserTokenKycAu10tix200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUserUserTokenKycAu10tixAsync
     *
     * Get an Au10tix session link
     *
     * @param  string $user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserUserTokenKycAu10tix'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserUserTokenKycAu10tixAsync($user_token, string $contentType = self::contentTypes['getUserUserTokenKycAu10tix'][0])
    {
        return $this->getUserUserTokenKycAu10tixAsyncWithHttpInfo($user_token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUserUserTokenKycAu10tixAsyncWithHttpInfo
     *
     * Get an Au10tix session link
     *
     * @param  string $user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserUserTokenKycAu10tix'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserUserTokenKycAu10tixAsyncWithHttpInfo($user_token, string $contentType = self::contentTypes['getUserUserTokenKycAu10tix'][0])
    {
        $returnType = '\MassPayPhpSdk\Model\GetUserUserTokenKycAu10tix200Response';
        $request = $this->getUserUserTokenKycAu10tixRequest($user_token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUserUserTokenKycAu10tix'
     *
     * @param  string $user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserUserTokenKycAu10tix'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUserUserTokenKycAu10tixRequest($user_token, string $contentType = self::contentTypes['getUserUserTokenKycAu10tix'][0])
    {

        // verify the required parameter 'user_token' is set
        if ($user_token === null || (is_array($user_token) && count($user_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_token when calling getUserUserTokenKycAu10tix'
            );
        }


        $resourcePath = '/user/{user_token}/kyc/au10tix';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_token !== null) {
            $resourcePath = str_replace(
                '{' . 'user_token' . '}',
                ObjectSerializer::toPathValue($user_token),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUserUserTokenKycVeriiff
     *
     * Get a Veriff session link
     *
     * @param  string $user_token user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserUserTokenKycVeriiff'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MassPayPhpSdk\Model\GetUserUserTokenKycVeriiff200Response
     */
    public function getUserUserTokenKycVeriiff($user_token, string $contentType = self::contentTypes['getUserUserTokenKycVeriiff'][0])
    {
        list($response) = $this->getUserUserTokenKycVeriiffWithHttpInfo($user_token, $contentType);
        return $response;
    }

    /**
     * Operation getUserUserTokenKycVeriiffWithHttpInfo
     *
     * Get a Veriff session link
     *
     * @param  string $user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserUserTokenKycVeriiff'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MassPayPhpSdk\Model\GetUserUserTokenKycVeriiff200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUserUserTokenKycVeriiffWithHttpInfo($user_token, string $contentType = self::contentTypes['getUserUserTokenKycVeriiff'][0])
    {
        $request = $this->getUserUserTokenKycVeriiffRequest($user_token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MassPayPhpSdk\Model\GetUserUserTokenKycVeriiff200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MassPayPhpSdk\Model\GetUserUserTokenKycVeriiff200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MassPayPhpSdk\Model\GetUserUserTokenKycVeriiff200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MassPayPhpSdk\Model\GetUserUserTokenKycVeriiff200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MassPayPhpSdk\Model\GetUserUserTokenKycVeriiff200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUserUserTokenKycVeriiffAsync
     *
     * Get a Veriff session link
     *
     * @param  string $user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserUserTokenKycVeriiff'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserUserTokenKycVeriiffAsync($user_token, string $contentType = self::contentTypes['getUserUserTokenKycVeriiff'][0])
    {
        return $this->getUserUserTokenKycVeriiffAsyncWithHttpInfo($user_token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUserUserTokenKycVeriiffAsyncWithHttpInfo
     *
     * Get a Veriff session link
     *
     * @param  string $user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserUserTokenKycVeriiff'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserUserTokenKycVeriiffAsyncWithHttpInfo($user_token, string $contentType = self::contentTypes['getUserUserTokenKycVeriiff'][0])
    {
        $returnType = '\MassPayPhpSdk\Model\GetUserUserTokenKycVeriiff200Response';
        $request = $this->getUserUserTokenKycVeriiffRequest($user_token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUserUserTokenKycVeriiff'
     *
     * @param  string $user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserUserTokenKycVeriiff'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUserUserTokenKycVeriiffRequest($user_token, string $contentType = self::contentTypes['getUserUserTokenKycVeriiff'][0])
    {

        // verify the required parameter 'user_token' is set
        if ($user_token === null || (is_array($user_token) && count($user_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_token when calling getUserUserTokenKycVeriiff'
            );
        }


        $resourcePath = '/user/{user_token}/kyc/veriff';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_token !== null) {
            $resourcePath = str_replace(
                '{' . 'user_token' . '}',
                ObjectSerializer::toPathValue($user_token),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateUser
     *
     * Updated user
     *
     * @param  string $user_token user token that need to be updated (required)
     * @param  \MassPayPhpSdk\Model\UpdateUser $update_user Updated user object (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateUser'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MassPayPhpSdk\Model\StoredUser
     */
    public function updateUser($user_token, $update_user, $idempotency_key = null, string $contentType = self::contentTypes['updateUser'][0])
    {
        list($response) = $this->updateUserWithHttpInfo($user_token, $update_user, $idempotency_key, $contentType);
        return $response;
    }

    /**
     * Operation updateUserWithHttpInfo
     *
     * Updated user
     *
     * @param  string $user_token user token that need to be updated (required)
     * @param  \MassPayPhpSdk\Model\UpdateUser $update_user Updated user object (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateUser'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MassPayPhpSdk\Model\StoredUser, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateUserWithHttpInfo($user_token, $update_user, $idempotency_key = null, string $contentType = self::contentTypes['updateUser'][0])
    {
        $request = $this->updateUserRequest($user_token, $update_user, $idempotency_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MassPayPhpSdk\Model\StoredUser' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MassPayPhpSdk\Model\StoredUser' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MassPayPhpSdk\Model\StoredUser', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MassPayPhpSdk\Model\StoredUser';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MassPayPhpSdk\Model\StoredUser',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateUserAsync
     *
     * Updated user
     *
     * @param  string $user_token user token that need to be updated (required)
     * @param  \MassPayPhpSdk\Model\UpdateUser $update_user Updated user object (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateUserAsync($user_token, $update_user, $idempotency_key = null, string $contentType = self::contentTypes['updateUser'][0])
    {
        return $this->updateUserAsyncWithHttpInfo($user_token, $update_user, $idempotency_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateUserAsyncWithHttpInfo
     *
     * Updated user
     *
     * @param  string $user_token user token that need to be updated (required)
     * @param  \MassPayPhpSdk\Model\UpdateUser $update_user Updated user object (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateUserAsyncWithHttpInfo($user_token, $update_user, $idempotency_key = null, string $contentType = self::contentTypes['updateUser'][0])
    {
        $returnType = '\MassPayPhpSdk\Model\StoredUser';
        $request = $this->updateUserRequest($user_token, $update_user, $idempotency_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateUser'
     *
     * @param  string $user_token user token that need to be updated (required)
     * @param  \MassPayPhpSdk\Model\UpdateUser $update_user Updated user object (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateUserRequest($user_token, $update_user, $idempotency_key = null, string $contentType = self::contentTypes['updateUser'][0])
    {

        // verify the required parameter 'user_token' is set
        if ($user_token === null || (is_array($user_token) && count($user_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_token when calling updateUser'
            );
        }

        // verify the required parameter 'update_user' is set
        if ($update_user === null || (is_array($update_user) && count($update_user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_user when calling updateUser'
            );
        }



        $resourcePath = '/user/{user_token}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($idempotency_key !== null) {
            $headerParams['Idempotency-Key'] = ObjectSerializer::toHeaderValue($idempotency_key);
        }

        // path params
        if ($user_token !== null) {
            $resourcePath = str_replace(
                '{' . 'user_token' . '}',
                ObjectSerializer::toPathValue($user_token),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_user)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_user));
            } else {
                $httpBody = $update_user;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userLookup
     *
     * Lookup an existing user
     *
     * @param  string $email User&#39;s email address. Required if First Name is provided (required)
     * @param  string $first_name User&#39;s first name. Required if email is provided (required)
     * @param  string $internal_user_id A client-defined identifier for the user. This is the unique ID assigned to the user on your system. Max 75 characters. Allows letters, numbers, and + , - . / _ ~ |. Required if email and first name are not provided (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userLookup'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MassPayPhpSdk\Model\FoundUser|\MassPayPhpSdk\Model\Exception
     */
    public function userLookup($email, $first_name, $internal_user_id, $idempotency_key = null, string $contentType = self::contentTypes['userLookup'][0])
    {
        list($response) = $this->userLookupWithHttpInfo($email, $first_name, $internal_user_id, $idempotency_key, $contentType);
        return $response;
    }

    /**
     * Operation userLookupWithHttpInfo
     *
     * Lookup an existing user
     *
     * @param  string $email User&#39;s email address. Required if First Name is provided (required)
     * @param  string $first_name User&#39;s first name. Required if email is provided (required)
     * @param  string $internal_user_id A client-defined identifier for the user. This is the unique ID assigned to the user on your system. Max 75 characters. Allows letters, numbers, and + , - . / _ ~ |. Required if email and first name are not provided (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userLookup'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MassPayPhpSdk\Model\FoundUser|\MassPayPhpSdk\Model\Exception, HTTP status code, HTTP response headers (array of strings)
     */
    public function userLookupWithHttpInfo($email, $first_name, $internal_user_id, $idempotency_key = null, string $contentType = self::contentTypes['userLookup'][0])
    {
        $request = $this->userLookupRequest($email, $first_name, $internal_user_id, $idempotency_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MassPayPhpSdk\Model\FoundUser' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MassPayPhpSdk\Model\FoundUser' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MassPayPhpSdk\Model\FoundUser', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\MassPayPhpSdk\Model\Exception' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MassPayPhpSdk\Model\Exception' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MassPayPhpSdk\Model\Exception', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MassPayPhpSdk\Model\FoundUser';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MassPayPhpSdk\Model\FoundUser',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MassPayPhpSdk\Model\Exception',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userLookupAsync
     *
     * Lookup an existing user
     *
     * @param  string $email User&#39;s email address. Required if First Name is provided (required)
     * @param  string $first_name User&#39;s first name. Required if email is provided (required)
     * @param  string $internal_user_id A client-defined identifier for the user. This is the unique ID assigned to the user on your system. Max 75 characters. Allows letters, numbers, and + , - . / _ ~ |. Required if email and first name are not provided (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userLookup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userLookupAsync($email, $first_name, $internal_user_id, $idempotency_key = null, string $contentType = self::contentTypes['userLookup'][0])
    {
        return $this->userLookupAsyncWithHttpInfo($email, $first_name, $internal_user_id, $idempotency_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userLookupAsyncWithHttpInfo
     *
     * Lookup an existing user
     *
     * @param  string $email User&#39;s email address. Required if First Name is provided (required)
     * @param  string $first_name User&#39;s first name. Required if email is provided (required)
     * @param  string $internal_user_id A client-defined identifier for the user. This is the unique ID assigned to the user on your system. Max 75 characters. Allows letters, numbers, and + , - . / _ ~ |. Required if email and first name are not provided (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userLookup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userLookupAsyncWithHttpInfo($email, $first_name, $internal_user_id, $idempotency_key = null, string $contentType = self::contentTypes['userLookup'][0])
    {
        $returnType = '\MassPayPhpSdk\Model\FoundUser';
        $request = $this->userLookupRequest($email, $first_name, $internal_user_id, $idempotency_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userLookup'
     *
     * @param  string $email User&#39;s email address. Required if First Name is provided (required)
     * @param  string $first_name User&#39;s first name. Required if email is provided (required)
     * @param  string $internal_user_id A client-defined identifier for the user. This is the unique ID assigned to the user on your system. Max 75 characters. Allows letters, numbers, and + , - . / _ ~ |. Required if email and first name are not provided (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userLookup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userLookupRequest($email, $first_name, $internal_user_id, $idempotency_key = null, string $contentType = self::contentTypes['userLookup'][0])
    {

        // verify the required parameter 'email' is set
        if ($email === null || (is_array($email) && count($email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email when calling userLookup'
            );
        }

        // verify the required parameter 'first_name' is set
        if ($first_name === null || (is_array($first_name) && count($first_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $first_name when calling userLookup'
            );
        }

        // verify the required parameter 'internal_user_id' is set
        if ($internal_user_id === null || (is_array($internal_user_id) && count($internal_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $internal_user_id when calling userLookup'
            );
        }



        $resourcePath = '/user/lookup';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $email,
            'email', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $first_name,
            'first_name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $internal_user_id,
            'internal_user_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);

        // header params
        if ($idempotency_key !== null) {
            $headerParams['Idempotency-Key'] = ObjectSerializer::toHeaderValue($idempotency_key);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
