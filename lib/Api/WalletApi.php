<?php
/**
 * WalletApi
 * PHP version 7.4
 *
 * @category Class
 * @package  MassPayPhpSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MassPay API
 *
 * MassPay API
 *
 * The version of the OpenAPI document: 0.1.4
 * Contact: info@masspay.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MassPayPhpSdk\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use MassPayPhpSdk\ApiException;
use MassPayPhpSdk\Configuration;
use MassPayPhpSdk\HeaderSelector;
use MassPayPhpSdk\ObjectSerializer;

/**
 * WalletApi Class Doc Comment
 *
 * @category Class
 * @package  MassPayPhpSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class WalletApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createAutopayRule' => [
            'application/json',
        ],
        'deleteAutopayRule' => [
            'application/json',
        ],
        'getAutopayRules' => [
            'application/json',
        ],
        'getWallet' => [
            'application/json',
        ],
        'getWalletCardInfo' => [
            'application/json',
        ],
        'updateWalletCardInfo' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createAutopayRule
     *
     * Add autopay rule
     *
     * @param  string $user_token Token representing the user who owns the wallet (required)
     * @param  string $wallet_token Token representing the wallet (required)
     * @param  \MassPayPhpSdk\Model\AutopayRule $autopay_rule Autopay rule configuration (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAutopayRule'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MassPayPhpSdk\Model\AutopayResp|\MassPayPhpSdk\Model\Exception
     */
    public function createAutopayRule($user_token, $wallet_token, $autopay_rule = null, string $contentType = self::contentTypes['createAutopayRule'][0])
    {
        list($response) = $this->createAutopayRuleWithHttpInfo($user_token, $wallet_token, $autopay_rule, $contentType);
        return $response;
    }

    /**
     * Operation createAutopayRuleWithHttpInfo
     *
     * Add autopay rule
     *
     * @param  string $user_token Token representing the user who owns the wallet (required)
     * @param  string $wallet_token Token representing the wallet (required)
     * @param  \MassPayPhpSdk\Model\AutopayRule $autopay_rule Autopay rule configuration (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAutopayRule'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MassPayPhpSdk\Model\AutopayResp|\MassPayPhpSdk\Model\Exception, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAutopayRuleWithHttpInfo($user_token, $wallet_token, $autopay_rule = null, string $contentType = self::contentTypes['createAutopayRule'][0])
    {
        $request = $this->createAutopayRuleRequest($user_token, $wallet_token, $autopay_rule, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MassPayPhpSdk\Model\AutopayResp' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MassPayPhpSdk\Model\AutopayResp' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MassPayPhpSdk\Model\AutopayResp', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\MassPayPhpSdk\Model\Exception' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MassPayPhpSdk\Model\Exception' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MassPayPhpSdk\Model\Exception', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MassPayPhpSdk\Model\AutopayResp';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MassPayPhpSdk\Model\AutopayResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MassPayPhpSdk\Model\Exception',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAutopayRuleAsync
     *
     * Add autopay rule
     *
     * @param  string $user_token Token representing the user who owns the wallet (required)
     * @param  string $wallet_token Token representing the wallet (required)
     * @param  \MassPayPhpSdk\Model\AutopayRule $autopay_rule Autopay rule configuration (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAutopayRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAutopayRuleAsync($user_token, $wallet_token, $autopay_rule = null, string $contentType = self::contentTypes['createAutopayRule'][0])
    {
        return $this->createAutopayRuleAsyncWithHttpInfo($user_token, $wallet_token, $autopay_rule, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAutopayRuleAsyncWithHttpInfo
     *
     * Add autopay rule
     *
     * @param  string $user_token Token representing the user who owns the wallet (required)
     * @param  string $wallet_token Token representing the wallet (required)
     * @param  \MassPayPhpSdk\Model\AutopayRule $autopay_rule Autopay rule configuration (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAutopayRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAutopayRuleAsyncWithHttpInfo($user_token, $wallet_token, $autopay_rule = null, string $contentType = self::contentTypes['createAutopayRule'][0])
    {
        $returnType = '\MassPayPhpSdk\Model\AutopayResp';
        $request = $this->createAutopayRuleRequest($user_token, $wallet_token, $autopay_rule, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAutopayRule'
     *
     * @param  string $user_token Token representing the user who owns the wallet (required)
     * @param  string $wallet_token Token representing the wallet (required)
     * @param  \MassPayPhpSdk\Model\AutopayRule $autopay_rule Autopay rule configuration (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAutopayRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createAutopayRuleRequest($user_token, $wallet_token, $autopay_rule = null, string $contentType = self::contentTypes['createAutopayRule'][0])
    {

        // verify the required parameter 'user_token' is set
        if ($user_token === null || (is_array($user_token) && count($user_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_token when calling createAutopayRule'
            );
        }

        // verify the required parameter 'wallet_token' is set
        if ($wallet_token === null || (is_array($wallet_token) && count($wallet_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wallet_token when calling createAutopayRule'
            );
        }



        $resourcePath = '/wallet/{user_token}/{wallet_token}/autopay';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_token !== null) {
            $resourcePath = str_replace(
                '{' . 'user_token' . '}',
                ObjectSerializer::toPathValue($user_token),
                $resourcePath
            );
        }
        // path params
        if ($wallet_token !== null) {
            $resourcePath = str_replace(
                '{' . 'wallet_token' . '}',
                ObjectSerializer::toPathValue($wallet_token),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($autopay_rule)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($autopay_rule));
            } else {
                $httpBody = $autopay_rule;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAutopayRule
     *
     * Delete autopay rule
     *
     * @param  string $user_token Token representing the user who owns the wallet (required)
     * @param  string $wallet_token Token representing the wallet (required)
     * @param  string $token Autopay token to delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAutopayRule'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAutopayRule($user_token, $wallet_token, $token, string $contentType = self::contentTypes['deleteAutopayRule'][0])
    {
        $this->deleteAutopayRuleWithHttpInfo($user_token, $wallet_token, $token, $contentType);
    }

    /**
     * Operation deleteAutopayRuleWithHttpInfo
     *
     * Delete autopay rule
     *
     * @param  string $user_token Token representing the user who owns the wallet (required)
     * @param  string $wallet_token Token representing the wallet (required)
     * @param  string $token Autopay token to delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAutopayRule'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAutopayRuleWithHttpInfo($user_token, $wallet_token, $token, string $contentType = self::contentTypes['deleteAutopayRule'][0])
    {
        $request = $this->deleteAutopayRuleRequest($user_token, $wallet_token, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MassPayPhpSdk\Model\Exception',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAutopayRuleAsync
     *
     * Delete autopay rule
     *
     * @param  string $user_token Token representing the user who owns the wallet (required)
     * @param  string $wallet_token Token representing the wallet (required)
     * @param  string $token Autopay token to delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAutopayRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAutopayRuleAsync($user_token, $wallet_token, $token, string $contentType = self::contentTypes['deleteAutopayRule'][0])
    {
        return $this->deleteAutopayRuleAsyncWithHttpInfo($user_token, $wallet_token, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAutopayRuleAsyncWithHttpInfo
     *
     * Delete autopay rule
     *
     * @param  string $user_token Token representing the user who owns the wallet (required)
     * @param  string $wallet_token Token representing the wallet (required)
     * @param  string $token Autopay token to delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAutopayRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAutopayRuleAsyncWithHttpInfo($user_token, $wallet_token, $token, string $contentType = self::contentTypes['deleteAutopayRule'][0])
    {
        $returnType = '';
        $request = $this->deleteAutopayRuleRequest($user_token, $wallet_token, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAutopayRule'
     *
     * @param  string $user_token Token representing the user who owns the wallet (required)
     * @param  string $wallet_token Token representing the wallet (required)
     * @param  string $token Autopay token to delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAutopayRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAutopayRuleRequest($user_token, $wallet_token, $token, string $contentType = self::contentTypes['deleteAutopayRule'][0])
    {

        // verify the required parameter 'user_token' is set
        if ($user_token === null || (is_array($user_token) && count($user_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_token when calling deleteAutopayRule'
            );
        }

        // verify the required parameter 'wallet_token' is set
        if ($wallet_token === null || (is_array($wallet_token) && count($wallet_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wallet_token when calling deleteAutopayRule'
            );
        }

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling deleteAutopayRule'
            );
        }


        $resourcePath = '/wallet/{user_token}/{wallet_token}/autopay';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($user_token !== null) {
            $resourcePath = str_replace(
                '{' . 'user_token' . '}',
                ObjectSerializer::toPathValue($user_token),
                $resourcePath
            );
        }
        // path params
        if ($wallet_token !== null) {
            $resourcePath = str_replace(
                '{' . 'wallet_token' . '}',
                ObjectSerializer::toPathValue($wallet_token),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAutopayRules
     *
     * Get all autopay rules
     *
     * @param  string $user_token Token representing the user who owns the wallet (required)
     * @param  string $wallet_token Token representing the wallet (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAutopayRules'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MassPayPhpSdk\Model\AutopayResp[]|\MassPayPhpSdk\Model\Exception
     */
    public function getAutopayRules($user_token, $wallet_token, string $contentType = self::contentTypes['getAutopayRules'][0])
    {
        list($response) = $this->getAutopayRulesWithHttpInfo($user_token, $wallet_token, $contentType);
        return $response;
    }

    /**
     * Operation getAutopayRulesWithHttpInfo
     *
     * Get all autopay rules
     *
     * @param  string $user_token Token representing the user who owns the wallet (required)
     * @param  string $wallet_token Token representing the wallet (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAutopayRules'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MassPayPhpSdk\Model\AutopayResp[]|\MassPayPhpSdk\Model\Exception, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAutopayRulesWithHttpInfo($user_token, $wallet_token, string $contentType = self::contentTypes['getAutopayRules'][0])
    {
        $request = $this->getAutopayRulesRequest($user_token, $wallet_token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MassPayPhpSdk\Model\AutopayResp[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MassPayPhpSdk\Model\AutopayResp[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MassPayPhpSdk\Model\AutopayResp[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\MassPayPhpSdk\Model\Exception' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MassPayPhpSdk\Model\Exception' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MassPayPhpSdk\Model\Exception', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MassPayPhpSdk\Model\AutopayResp[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MassPayPhpSdk\Model\AutopayResp[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MassPayPhpSdk\Model\Exception',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAutopayRulesAsync
     *
     * Get all autopay rules
     *
     * @param  string $user_token Token representing the user who owns the wallet (required)
     * @param  string $wallet_token Token representing the wallet (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAutopayRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAutopayRulesAsync($user_token, $wallet_token, string $contentType = self::contentTypes['getAutopayRules'][0])
    {
        return $this->getAutopayRulesAsyncWithHttpInfo($user_token, $wallet_token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAutopayRulesAsyncWithHttpInfo
     *
     * Get all autopay rules
     *
     * @param  string $user_token Token representing the user who owns the wallet (required)
     * @param  string $wallet_token Token representing the wallet (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAutopayRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAutopayRulesAsyncWithHttpInfo($user_token, $wallet_token, string $contentType = self::contentTypes['getAutopayRules'][0])
    {
        $returnType = '\MassPayPhpSdk\Model\AutopayResp[]';
        $request = $this->getAutopayRulesRequest($user_token, $wallet_token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAutopayRules'
     *
     * @param  string $user_token Token representing the user who owns the wallet (required)
     * @param  string $wallet_token Token representing the wallet (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAutopayRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAutopayRulesRequest($user_token, $wallet_token, string $contentType = self::contentTypes['getAutopayRules'][0])
    {

        // verify the required parameter 'user_token' is set
        if ($user_token === null || (is_array($user_token) && count($user_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_token when calling getAutopayRules'
            );
        }

        // verify the required parameter 'wallet_token' is set
        if ($wallet_token === null || (is_array($wallet_token) && count($wallet_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wallet_token when calling getAutopayRules'
            );
        }


        $resourcePath = '/wallet/{user_token}/{wallet_token}/autopay';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_token !== null) {
            $resourcePath = str_replace(
                '{' . 'user_token' . '}',
                ObjectSerializer::toPathValue($user_token),
                $resourcePath
            );
        }
        // path params
        if ($wallet_token !== null) {
            $resourcePath = str_replace(
                '{' . 'wallet_token' . '}',
                ObjectSerializer::toPathValue($wallet_token),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWallet
     *
     * Retrieve all available wallets for a user
     *
     * @param  string $user_token Token representing the user who owns the wallet (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWallet'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MassPayPhpSdk\Model\WalletTxnResp[]|\MassPayPhpSdk\Model\Exception
     */
    public function getWallet($user_token, $idempotency_key = null, string $contentType = self::contentTypes['getWallet'][0])
    {
        list($response) = $this->getWalletWithHttpInfo($user_token, $idempotency_key, $contentType);
        return $response;
    }

    /**
     * Operation getWalletWithHttpInfo
     *
     * Retrieve all available wallets for a user
     *
     * @param  string $user_token Token representing the user who owns the wallet (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWallet'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MassPayPhpSdk\Model\WalletTxnResp[]|\MassPayPhpSdk\Model\Exception, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWalletWithHttpInfo($user_token, $idempotency_key = null, string $contentType = self::contentTypes['getWallet'][0])
    {
        $request = $this->getWalletRequest($user_token, $idempotency_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MassPayPhpSdk\Model\WalletTxnResp[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MassPayPhpSdk\Model\WalletTxnResp[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MassPayPhpSdk\Model\WalletTxnResp[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\MassPayPhpSdk\Model\Exception' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MassPayPhpSdk\Model\Exception' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MassPayPhpSdk\Model\Exception', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MassPayPhpSdk\Model\WalletTxnResp[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MassPayPhpSdk\Model\WalletTxnResp[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MassPayPhpSdk\Model\Exception',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWalletAsync
     *
     * Retrieve all available wallets for a user
     *
     * @param  string $user_token Token representing the user who owns the wallet (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWallet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWalletAsync($user_token, $idempotency_key = null, string $contentType = self::contentTypes['getWallet'][0])
    {
        return $this->getWalletAsyncWithHttpInfo($user_token, $idempotency_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getWalletAsyncWithHttpInfo
     *
     * Retrieve all available wallets for a user
     *
     * @param  string $user_token Token representing the user who owns the wallet (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWallet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWalletAsyncWithHttpInfo($user_token, $idempotency_key = null, string $contentType = self::contentTypes['getWallet'][0])
    {
        $returnType = '\MassPayPhpSdk\Model\WalletTxnResp[]';
        $request = $this->getWalletRequest($user_token, $idempotency_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getWallet'
     *
     * @param  string $user_token Token representing the user who owns the wallet (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWallet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getWalletRequest($user_token, $idempotency_key = null, string $contentType = self::contentTypes['getWallet'][0])
    {

        // verify the required parameter 'user_token' is set
        if ($user_token === null || (is_array($user_token) && count($user_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_token when calling getWallet'
            );
        }



        $resourcePath = '/wallet/{user_token}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($idempotency_key !== null) {
            $headerParams['Idempotency-Key'] = ObjectSerializer::toHeaderValue($idempotency_key);
        }

        // path params
        if ($user_token !== null) {
            $resourcePath = str_replace(
                '{' . 'user_token' . '}',
                ObjectSerializer::toPathValue($user_token),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWalletCardInfo
     *
     * Get MassPay Card Information
     *
     * @param  string $user_token Token representing the user who owns the wallet (required)
     * @param  string $wallet_token Token representing the wallet (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWalletCardInfo'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MassPayPhpSdk\Model\GetWalletCardInfo200Response|\MassPayPhpSdk\Model\Exception
     */
    public function getWalletCardInfo($user_token, $wallet_token, string $contentType = self::contentTypes['getWalletCardInfo'][0])
    {
        list($response) = $this->getWalletCardInfoWithHttpInfo($user_token, $wallet_token, $contentType);
        return $response;
    }

    /**
     * Operation getWalletCardInfoWithHttpInfo
     *
     * Get MassPay Card Information
     *
     * @param  string $user_token Token representing the user who owns the wallet (required)
     * @param  string $wallet_token Token representing the wallet (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWalletCardInfo'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MassPayPhpSdk\Model\GetWalletCardInfo200Response|\MassPayPhpSdk\Model\Exception, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWalletCardInfoWithHttpInfo($user_token, $wallet_token, string $contentType = self::contentTypes['getWalletCardInfo'][0])
    {
        $request = $this->getWalletCardInfoRequest($user_token, $wallet_token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MassPayPhpSdk\Model\GetWalletCardInfo200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MassPayPhpSdk\Model\GetWalletCardInfo200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MassPayPhpSdk\Model\GetWalletCardInfo200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\MassPayPhpSdk\Model\Exception' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MassPayPhpSdk\Model\Exception' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MassPayPhpSdk\Model\Exception', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MassPayPhpSdk\Model\GetWalletCardInfo200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MassPayPhpSdk\Model\GetWalletCardInfo200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MassPayPhpSdk\Model\Exception',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWalletCardInfoAsync
     *
     * Get MassPay Card Information
     *
     * @param  string $user_token Token representing the user who owns the wallet (required)
     * @param  string $wallet_token Token representing the wallet (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWalletCardInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWalletCardInfoAsync($user_token, $wallet_token, string $contentType = self::contentTypes['getWalletCardInfo'][0])
    {
        return $this->getWalletCardInfoAsyncWithHttpInfo($user_token, $wallet_token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getWalletCardInfoAsyncWithHttpInfo
     *
     * Get MassPay Card Information
     *
     * @param  string $user_token Token representing the user who owns the wallet (required)
     * @param  string $wallet_token Token representing the wallet (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWalletCardInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWalletCardInfoAsyncWithHttpInfo($user_token, $wallet_token, string $contentType = self::contentTypes['getWalletCardInfo'][0])
    {
        $returnType = '\MassPayPhpSdk\Model\GetWalletCardInfo200Response';
        $request = $this->getWalletCardInfoRequest($user_token, $wallet_token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getWalletCardInfo'
     *
     * @param  string $user_token Token representing the user who owns the wallet (required)
     * @param  string $wallet_token Token representing the wallet (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWalletCardInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getWalletCardInfoRequest($user_token, $wallet_token, string $contentType = self::contentTypes['getWalletCardInfo'][0])
    {

        // verify the required parameter 'user_token' is set
        if ($user_token === null || (is_array($user_token) && count($user_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_token when calling getWalletCardInfo'
            );
        }

        // verify the required parameter 'wallet_token' is set
        if ($wallet_token === null || (is_array($wallet_token) && count($wallet_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wallet_token when calling getWalletCardInfo'
            );
        }


        $resourcePath = '/wallet/{user_token}/{wallet_token}/card';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_token !== null) {
            $resourcePath = str_replace(
                '{' . 'user_token' . '}',
                ObjectSerializer::toPathValue($user_token),
                $resourcePath
            );
        }
        // path params
        if ($wallet_token !== null) {
            $resourcePath = str_replace(
                '{' . 'wallet_token' . '}',
                ObjectSerializer::toPathValue($wallet_token),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateWalletCardInfo
     *
     * Update MassPay Card Information
     *
     * @param  string $user_token Token representing the user who owns the wallet (required)
     * @param  string $wallet_token Token representing the wallet (required)
     * @param  string $pin New 4 digit pin number for the card (To be used in ATM machines) (optional)
     * @param  string $status New status for the card (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateWalletCardInfo'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateWalletCardInfo($user_token, $wallet_token, $pin = null, $status = null, string $contentType = self::contentTypes['updateWalletCardInfo'][0])
    {
        $this->updateWalletCardInfoWithHttpInfo($user_token, $wallet_token, $pin, $status, $contentType);
    }

    /**
     * Operation updateWalletCardInfoWithHttpInfo
     *
     * Update MassPay Card Information
     *
     * @param  string $user_token Token representing the user who owns the wallet (required)
     * @param  string $wallet_token Token representing the wallet (required)
     * @param  string $pin New 4 digit pin number for the card (To be used in ATM machines) (optional)
     * @param  string $status New status for the card (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateWalletCardInfo'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateWalletCardInfoWithHttpInfo($user_token, $wallet_token, $pin = null, $status = null, string $contentType = self::contentTypes['updateWalletCardInfo'][0])
    {
        $request = $this->updateWalletCardInfoRequest($user_token, $wallet_token, $pin, $status, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MassPayPhpSdk\Model\Exception',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateWalletCardInfoAsync
     *
     * Update MassPay Card Information
     *
     * @param  string $user_token Token representing the user who owns the wallet (required)
     * @param  string $wallet_token Token representing the wallet (required)
     * @param  string $pin New 4 digit pin number for the card (To be used in ATM machines) (optional)
     * @param  string $status New status for the card (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateWalletCardInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWalletCardInfoAsync($user_token, $wallet_token, $pin = null, $status = null, string $contentType = self::contentTypes['updateWalletCardInfo'][0])
    {
        return $this->updateWalletCardInfoAsyncWithHttpInfo($user_token, $wallet_token, $pin, $status, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateWalletCardInfoAsyncWithHttpInfo
     *
     * Update MassPay Card Information
     *
     * @param  string $user_token Token representing the user who owns the wallet (required)
     * @param  string $wallet_token Token representing the wallet (required)
     * @param  string $pin New 4 digit pin number for the card (To be used in ATM machines) (optional)
     * @param  string $status New status for the card (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateWalletCardInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWalletCardInfoAsyncWithHttpInfo($user_token, $wallet_token, $pin = null, $status = null, string $contentType = self::contentTypes['updateWalletCardInfo'][0])
    {
        $returnType = '';
        $request = $this->updateWalletCardInfoRequest($user_token, $wallet_token, $pin, $status, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateWalletCardInfo'
     *
     * @param  string $user_token Token representing the user who owns the wallet (required)
     * @param  string $wallet_token Token representing the wallet (required)
     * @param  string $pin New 4 digit pin number for the card (To be used in ATM machines) (optional)
     * @param  string $status New status for the card (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateWalletCardInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateWalletCardInfoRequest($user_token, $wallet_token, $pin = null, $status = null, string $contentType = self::contentTypes['updateWalletCardInfo'][0])
    {

        // verify the required parameter 'user_token' is set
        if ($user_token === null || (is_array($user_token) && count($user_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_token when calling updateWalletCardInfo'
            );
        }

        // verify the required parameter 'wallet_token' is set
        if ($wallet_token === null || (is_array($wallet_token) && count($wallet_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wallet_token when calling updateWalletCardInfo'
            );
        }

        if ($pin !== null && !preg_match("/^[0-9]{4}$/", $pin)) {
            throw new \InvalidArgumentException("invalid value for \"pin\" when calling WalletApi.updateWalletCardInfo, must conform to the pattern /^[0-9]{4}$/.");
        }
        


        $resourcePath = '/wallet/{user_token}/{wallet_token}/card';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pin,
            'pin', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($user_token !== null) {
            $resourcePath = str_replace(
                '{' . 'user_token' . '}',
                ObjectSerializer::toPathValue($user_token),
                $resourcePath
            );
        }
        // path params
        if ($wallet_token !== null) {
            $resourcePath = str_replace(
                '{' . 'wallet_token' . '}',
                ObjectSerializer::toPathValue($wallet_token),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
