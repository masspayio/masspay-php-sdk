<?php
/**
 * LoadApi
 * PHP version 7.4
 *
 * @category Class
 * @package  MassPayPhpSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MassPay API
 *
 * MassPay API
 *
 * The version of the OpenAPI document: 0.1.4
 * Contact: info@masspay.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MassPayPhpSdk\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use MassPayPhpSdk\ApiException;
use MassPayPhpSdk\Configuration;
use MassPayPhpSdk\HeaderSelector;
use MassPayPhpSdk\ObjectSerializer;

/**
 * LoadApi Class Doc Comment
 *
 * @category Class
 * @package  MassPayPhpSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LoadApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'cancelUserLoad' => [
            'application/json',
        ],
        'createAutopayRule' => [
            'application/json',
        ],
        'deleteAutopayRule' => [
            'application/json',
        ],
        'getAutopayRules' => [
            'application/json',
        ],
        'getUserLoadsByToken' => [
            'application/json',
        ],
        'loadUser' => [
            'application/json',
        ],
        'resendLoadNotification' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cancelUserLoad
     *
     * Reverse a user load
     *
     * @param  string $user_token Token representing the user to load/fetch loads for (required)
     * @param  string $load_token Load token (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelUserLoad'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function cancelUserLoad($user_token, $load_token, $idempotency_key = null, string $contentType = self::contentTypes['cancelUserLoad'][0])
    {
        $this->cancelUserLoadWithHttpInfo($user_token, $load_token, $idempotency_key, $contentType);
    }

    /**
     * Operation cancelUserLoadWithHttpInfo
     *
     * Reverse a user load
     *
     * @param  string $user_token Token representing the user to load/fetch loads for (required)
     * @param  string $load_token Load token (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelUserLoad'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelUserLoadWithHttpInfo($user_token, $load_token, $idempotency_key = null, string $contentType = self::contentTypes['cancelUserLoad'][0])
    {
        $request = $this->cancelUserLoadRequest($user_token, $load_token, $idempotency_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation cancelUserLoadAsync
     *
     * Reverse a user load
     *
     * @param  string $user_token Token representing the user to load/fetch loads for (required)
     * @param  string $load_token Load token (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelUserLoad'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelUserLoadAsync($user_token, $load_token, $idempotency_key = null, string $contentType = self::contentTypes['cancelUserLoad'][0])
    {
        return $this->cancelUserLoadAsyncWithHttpInfo($user_token, $load_token, $idempotency_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelUserLoadAsyncWithHttpInfo
     *
     * Reverse a user load
     *
     * @param  string $user_token Token representing the user to load/fetch loads for (required)
     * @param  string $load_token Load token (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelUserLoad'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelUserLoadAsyncWithHttpInfo($user_token, $load_token, $idempotency_key = null, string $contentType = self::contentTypes['cancelUserLoad'][0])
    {
        $returnType = '';
        $request = $this->cancelUserLoadRequest($user_token, $load_token, $idempotency_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelUserLoad'
     *
     * @param  string $user_token Token representing the user to load/fetch loads for (required)
     * @param  string $load_token Load token (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelUserLoad'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cancelUserLoadRequest($user_token, $load_token, $idempotency_key = null, string $contentType = self::contentTypes['cancelUserLoad'][0])
    {

        // verify the required parameter 'user_token' is set
        if ($user_token === null || (is_array($user_token) && count($user_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_token when calling cancelUserLoad'
            );
        }

        // verify the required parameter 'load_token' is set
        if ($load_token === null || (is_array($load_token) && count($load_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $load_token when calling cancelUserLoad'
            );
        }



        $resourcePath = '/load/{user_token}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $load_token,
            'load_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);

        // header params
        if ($idempotency_key !== null) {
            $headerParams['Idempotency-Key'] = ObjectSerializer::toHeaderValue($idempotency_key);
        }

        // path params
        if ($user_token !== null) {
            $resourcePath = str_replace(
                '{' . 'user_token' . '}',
                ObjectSerializer::toPathValue($user_token),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createAutopayRule
     *
     * Add autopay rule
     *
     * @param  string $user_token Token representing the user who owns the wallet (required)
     * @param  string $wallet_token Token representing the wallet (required)
     * @param  \MassPayPhpSdk\Model\AutopayRule $autopay_rule Autopay rule configuration (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAutopayRule'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MassPayPhpSdk\Model\AutopayResp|\MassPayPhpSdk\Model\Exception
     */
    public function createAutopayRule($user_token, $wallet_token, $autopay_rule = null, string $contentType = self::contentTypes['createAutopayRule'][0])
    {
        list($response) = $this->createAutopayRuleWithHttpInfo($user_token, $wallet_token, $autopay_rule, $contentType);
        return $response;
    }

    /**
     * Operation createAutopayRuleWithHttpInfo
     *
     * Add autopay rule
     *
     * @param  string $user_token Token representing the user who owns the wallet (required)
     * @param  string $wallet_token Token representing the wallet (required)
     * @param  \MassPayPhpSdk\Model\AutopayRule $autopay_rule Autopay rule configuration (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAutopayRule'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MassPayPhpSdk\Model\AutopayResp|\MassPayPhpSdk\Model\Exception, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAutopayRuleWithHttpInfo($user_token, $wallet_token, $autopay_rule = null, string $contentType = self::contentTypes['createAutopayRule'][0])
    {
        $request = $this->createAutopayRuleRequest($user_token, $wallet_token, $autopay_rule, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MassPayPhpSdk\Model\AutopayResp' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MassPayPhpSdk\Model\AutopayResp' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MassPayPhpSdk\Model\AutopayResp', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\MassPayPhpSdk\Model\Exception' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MassPayPhpSdk\Model\Exception' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MassPayPhpSdk\Model\Exception', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MassPayPhpSdk\Model\AutopayResp';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MassPayPhpSdk\Model\AutopayResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MassPayPhpSdk\Model\Exception',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAutopayRuleAsync
     *
     * Add autopay rule
     *
     * @param  string $user_token Token representing the user who owns the wallet (required)
     * @param  string $wallet_token Token representing the wallet (required)
     * @param  \MassPayPhpSdk\Model\AutopayRule $autopay_rule Autopay rule configuration (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAutopayRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAutopayRuleAsync($user_token, $wallet_token, $autopay_rule = null, string $contentType = self::contentTypes['createAutopayRule'][0])
    {
        return $this->createAutopayRuleAsyncWithHttpInfo($user_token, $wallet_token, $autopay_rule, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAutopayRuleAsyncWithHttpInfo
     *
     * Add autopay rule
     *
     * @param  string $user_token Token representing the user who owns the wallet (required)
     * @param  string $wallet_token Token representing the wallet (required)
     * @param  \MassPayPhpSdk\Model\AutopayRule $autopay_rule Autopay rule configuration (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAutopayRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAutopayRuleAsyncWithHttpInfo($user_token, $wallet_token, $autopay_rule = null, string $contentType = self::contentTypes['createAutopayRule'][0])
    {
        $returnType = '\MassPayPhpSdk\Model\AutopayResp';
        $request = $this->createAutopayRuleRequest($user_token, $wallet_token, $autopay_rule, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAutopayRule'
     *
     * @param  string $user_token Token representing the user who owns the wallet (required)
     * @param  string $wallet_token Token representing the wallet (required)
     * @param  \MassPayPhpSdk\Model\AutopayRule $autopay_rule Autopay rule configuration (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAutopayRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createAutopayRuleRequest($user_token, $wallet_token, $autopay_rule = null, string $contentType = self::contentTypes['createAutopayRule'][0])
    {

        // verify the required parameter 'user_token' is set
        if ($user_token === null || (is_array($user_token) && count($user_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_token when calling createAutopayRule'
            );
        }

        // verify the required parameter 'wallet_token' is set
        if ($wallet_token === null || (is_array($wallet_token) && count($wallet_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wallet_token when calling createAutopayRule'
            );
        }



        $resourcePath = '/wallet/{user_token}/{wallet_token}/autopay';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_token !== null) {
            $resourcePath = str_replace(
                '{' . 'user_token' . '}',
                ObjectSerializer::toPathValue($user_token),
                $resourcePath
            );
        }
        // path params
        if ($wallet_token !== null) {
            $resourcePath = str_replace(
                '{' . 'wallet_token' . '}',
                ObjectSerializer::toPathValue($wallet_token),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($autopay_rule)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($autopay_rule));
            } else {
                $httpBody = $autopay_rule;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAutopayRule
     *
     * Delete autopay rule
     *
     * @param  string $user_token Token representing the user who owns the wallet (required)
     * @param  string $wallet_token Token representing the wallet (required)
     * @param  string $token Autopay token to delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAutopayRule'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAutopayRule($user_token, $wallet_token, $token, string $contentType = self::contentTypes['deleteAutopayRule'][0])
    {
        $this->deleteAutopayRuleWithHttpInfo($user_token, $wallet_token, $token, $contentType);
    }

    /**
     * Operation deleteAutopayRuleWithHttpInfo
     *
     * Delete autopay rule
     *
     * @param  string $user_token Token representing the user who owns the wallet (required)
     * @param  string $wallet_token Token representing the wallet (required)
     * @param  string $token Autopay token to delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAutopayRule'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAutopayRuleWithHttpInfo($user_token, $wallet_token, $token, string $contentType = self::contentTypes['deleteAutopayRule'][0])
    {
        $request = $this->deleteAutopayRuleRequest($user_token, $wallet_token, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MassPayPhpSdk\Model\Exception',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAutopayRuleAsync
     *
     * Delete autopay rule
     *
     * @param  string $user_token Token representing the user who owns the wallet (required)
     * @param  string $wallet_token Token representing the wallet (required)
     * @param  string $token Autopay token to delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAutopayRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAutopayRuleAsync($user_token, $wallet_token, $token, string $contentType = self::contentTypes['deleteAutopayRule'][0])
    {
        return $this->deleteAutopayRuleAsyncWithHttpInfo($user_token, $wallet_token, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAutopayRuleAsyncWithHttpInfo
     *
     * Delete autopay rule
     *
     * @param  string $user_token Token representing the user who owns the wallet (required)
     * @param  string $wallet_token Token representing the wallet (required)
     * @param  string $token Autopay token to delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAutopayRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAutopayRuleAsyncWithHttpInfo($user_token, $wallet_token, $token, string $contentType = self::contentTypes['deleteAutopayRule'][0])
    {
        $returnType = '';
        $request = $this->deleteAutopayRuleRequest($user_token, $wallet_token, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAutopayRule'
     *
     * @param  string $user_token Token representing the user who owns the wallet (required)
     * @param  string $wallet_token Token representing the wallet (required)
     * @param  string $token Autopay token to delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAutopayRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAutopayRuleRequest($user_token, $wallet_token, $token, string $contentType = self::contentTypes['deleteAutopayRule'][0])
    {

        // verify the required parameter 'user_token' is set
        if ($user_token === null || (is_array($user_token) && count($user_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_token when calling deleteAutopayRule'
            );
        }

        // verify the required parameter 'wallet_token' is set
        if ($wallet_token === null || (is_array($wallet_token) && count($wallet_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wallet_token when calling deleteAutopayRule'
            );
        }

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling deleteAutopayRule'
            );
        }


        $resourcePath = '/wallet/{user_token}/{wallet_token}/autopay';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($user_token !== null) {
            $resourcePath = str_replace(
                '{' . 'user_token' . '}',
                ObjectSerializer::toPathValue($user_token),
                $resourcePath
            );
        }
        // path params
        if ($wallet_token !== null) {
            $resourcePath = str_replace(
                '{' . 'wallet_token' . '}',
                ObjectSerializer::toPathValue($wallet_token),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAutopayRules
     *
     * Get all autopay rules
     *
     * @param  string $user_token Token representing the user who owns the wallet (required)
     * @param  string $wallet_token Token representing the wallet (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAutopayRules'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MassPayPhpSdk\Model\AutopayResp[]|\MassPayPhpSdk\Model\Exception
     */
    public function getAutopayRules($user_token, $wallet_token, string $contentType = self::contentTypes['getAutopayRules'][0])
    {
        list($response) = $this->getAutopayRulesWithHttpInfo($user_token, $wallet_token, $contentType);
        return $response;
    }

    /**
     * Operation getAutopayRulesWithHttpInfo
     *
     * Get all autopay rules
     *
     * @param  string $user_token Token representing the user who owns the wallet (required)
     * @param  string $wallet_token Token representing the wallet (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAutopayRules'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MassPayPhpSdk\Model\AutopayResp[]|\MassPayPhpSdk\Model\Exception, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAutopayRulesWithHttpInfo($user_token, $wallet_token, string $contentType = self::contentTypes['getAutopayRules'][0])
    {
        $request = $this->getAutopayRulesRequest($user_token, $wallet_token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MassPayPhpSdk\Model\AutopayResp[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MassPayPhpSdk\Model\AutopayResp[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MassPayPhpSdk\Model\AutopayResp[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\MassPayPhpSdk\Model\Exception' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MassPayPhpSdk\Model\Exception' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MassPayPhpSdk\Model\Exception', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MassPayPhpSdk\Model\AutopayResp[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MassPayPhpSdk\Model\AutopayResp[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MassPayPhpSdk\Model\Exception',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAutopayRulesAsync
     *
     * Get all autopay rules
     *
     * @param  string $user_token Token representing the user who owns the wallet (required)
     * @param  string $wallet_token Token representing the wallet (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAutopayRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAutopayRulesAsync($user_token, $wallet_token, string $contentType = self::contentTypes['getAutopayRules'][0])
    {
        return $this->getAutopayRulesAsyncWithHttpInfo($user_token, $wallet_token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAutopayRulesAsyncWithHttpInfo
     *
     * Get all autopay rules
     *
     * @param  string $user_token Token representing the user who owns the wallet (required)
     * @param  string $wallet_token Token representing the wallet (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAutopayRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAutopayRulesAsyncWithHttpInfo($user_token, $wallet_token, string $contentType = self::contentTypes['getAutopayRules'][0])
    {
        $returnType = '\MassPayPhpSdk\Model\AutopayResp[]';
        $request = $this->getAutopayRulesRequest($user_token, $wallet_token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAutopayRules'
     *
     * @param  string $user_token Token representing the user who owns the wallet (required)
     * @param  string $wallet_token Token representing the wallet (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAutopayRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAutopayRulesRequest($user_token, $wallet_token, string $contentType = self::contentTypes['getAutopayRules'][0])
    {

        // verify the required parameter 'user_token' is set
        if ($user_token === null || (is_array($user_token) && count($user_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_token when calling getAutopayRules'
            );
        }

        // verify the required parameter 'wallet_token' is set
        if ($wallet_token === null || (is_array($wallet_token) && count($wallet_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wallet_token when calling getAutopayRules'
            );
        }


        $resourcePath = '/wallet/{user_token}/{wallet_token}/autopay';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_token !== null) {
            $resourcePath = str_replace(
                '{' . 'user_token' . '}',
                ObjectSerializer::toPathValue($user_token),
                $resourcePath
            );
        }
        // path params
        if ($wallet_token !== null) {
            $resourcePath = str_replace(
                '{' . 'wallet_token' . '}',
                ObjectSerializer::toPathValue($wallet_token),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUserLoadsByToken
     *
     * Get history of loads by user token
     *
     * @param  string $user_token The user token that needs to be fetched. (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserLoadsByToken'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MassPayPhpSdk\Model\Loads[]
     */
    public function getUserLoadsByToken($user_token, $idempotency_key = null, string $contentType = self::contentTypes['getUserLoadsByToken'][0])
    {
        list($response) = $this->getUserLoadsByTokenWithHttpInfo($user_token, $idempotency_key, $contentType);
        return $response;
    }

    /**
     * Operation getUserLoadsByTokenWithHttpInfo
     *
     * Get history of loads by user token
     *
     * @param  string $user_token The user token that needs to be fetched. (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserLoadsByToken'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MassPayPhpSdk\Model\Loads[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getUserLoadsByTokenWithHttpInfo($user_token, $idempotency_key = null, string $contentType = self::contentTypes['getUserLoadsByToken'][0])
    {
        $request = $this->getUserLoadsByTokenRequest($user_token, $idempotency_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MassPayPhpSdk\Model\Loads[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MassPayPhpSdk\Model\Loads[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MassPayPhpSdk\Model\Loads[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MassPayPhpSdk\Model\Loads[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MassPayPhpSdk\Model\Loads[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUserLoadsByTokenAsync
     *
     * Get history of loads by user token
     *
     * @param  string $user_token The user token that needs to be fetched. (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserLoadsByToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserLoadsByTokenAsync($user_token, $idempotency_key = null, string $contentType = self::contentTypes['getUserLoadsByToken'][0])
    {
        return $this->getUserLoadsByTokenAsyncWithHttpInfo($user_token, $idempotency_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUserLoadsByTokenAsyncWithHttpInfo
     *
     * Get history of loads by user token
     *
     * @param  string $user_token The user token that needs to be fetched. (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserLoadsByToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserLoadsByTokenAsyncWithHttpInfo($user_token, $idempotency_key = null, string $contentType = self::contentTypes['getUserLoadsByToken'][0])
    {
        $returnType = '\MassPayPhpSdk\Model\Loads[]';
        $request = $this->getUserLoadsByTokenRequest($user_token, $idempotency_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUserLoadsByToken'
     *
     * @param  string $user_token The user token that needs to be fetched. (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserLoadsByToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUserLoadsByTokenRequest($user_token, $idempotency_key = null, string $contentType = self::contentTypes['getUserLoadsByToken'][0])
    {

        // verify the required parameter 'user_token' is set
        if ($user_token === null || (is_array($user_token) && count($user_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_token when calling getUserLoadsByToken'
            );
        }



        $resourcePath = '/load/{user_token}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($idempotency_key !== null) {
            $headerParams['Idempotency-Key'] = ObjectSerializer::toHeaderValue($idempotency_key);
        }

        // path params
        if ($user_token !== null) {
            $resourcePath = str_replace(
                '{' . 'user_token' . '}',
                ObjectSerializer::toPathValue($user_token),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation loadUser
     *
     * Initiate a load transaction
     *
     * @param  string $user_token Token representing the user to load (required)
     * @param  \MassPayPhpSdk\Model\LoadTxn $load_txn Load information (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loadUser'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MassPayPhpSdk\Model\LoadTxnResp
     */
    public function loadUser($user_token, $load_txn, $idempotency_key = null, string $contentType = self::contentTypes['loadUser'][0])
    {
        list($response) = $this->loadUserWithHttpInfo($user_token, $load_txn, $idempotency_key, $contentType);
        return $response;
    }

    /**
     * Operation loadUserWithHttpInfo
     *
     * Initiate a load transaction
     *
     * @param  string $user_token Token representing the user to load (required)
     * @param  \MassPayPhpSdk\Model\LoadTxn $load_txn Load information (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loadUser'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MassPayPhpSdk\Model\LoadTxnResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function loadUserWithHttpInfo($user_token, $load_txn, $idempotency_key = null, string $contentType = self::contentTypes['loadUser'][0])
    {
        $request = $this->loadUserRequest($user_token, $load_txn, $idempotency_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MassPayPhpSdk\Model\LoadTxnResp' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MassPayPhpSdk\Model\LoadTxnResp' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MassPayPhpSdk\Model\LoadTxnResp', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MassPayPhpSdk\Model\LoadTxnResp';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MassPayPhpSdk\Model\LoadTxnResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation loadUserAsync
     *
     * Initiate a load transaction
     *
     * @param  string $user_token Token representing the user to load (required)
     * @param  \MassPayPhpSdk\Model\LoadTxn $load_txn Load information (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loadUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function loadUserAsync($user_token, $load_txn, $idempotency_key = null, string $contentType = self::contentTypes['loadUser'][0])
    {
        return $this->loadUserAsyncWithHttpInfo($user_token, $load_txn, $idempotency_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation loadUserAsyncWithHttpInfo
     *
     * Initiate a load transaction
     *
     * @param  string $user_token Token representing the user to load (required)
     * @param  \MassPayPhpSdk\Model\LoadTxn $load_txn Load information (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loadUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function loadUserAsyncWithHttpInfo($user_token, $load_txn, $idempotency_key = null, string $contentType = self::contentTypes['loadUser'][0])
    {
        $returnType = '\MassPayPhpSdk\Model\LoadTxnResp';
        $request = $this->loadUserRequest($user_token, $load_txn, $idempotency_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'loadUser'
     *
     * @param  string $user_token Token representing the user to load (required)
     * @param  \MassPayPhpSdk\Model\LoadTxn $load_txn Load information (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loadUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function loadUserRequest($user_token, $load_txn, $idempotency_key = null, string $contentType = self::contentTypes['loadUser'][0])
    {

        // verify the required parameter 'user_token' is set
        if ($user_token === null || (is_array($user_token) && count($user_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_token when calling loadUser'
            );
        }

        // verify the required parameter 'load_txn' is set
        if ($load_txn === null || (is_array($load_txn) && count($load_txn) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $load_txn when calling loadUser'
            );
        }



        $resourcePath = '/load/{user_token}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($idempotency_key !== null) {
            $headerParams['Idempotency-Key'] = ObjectSerializer::toHeaderValue($idempotency_key);
        }

        // path params
        if ($user_token !== null) {
            $resourcePath = str_replace(
                '{' . 'user_token' . '}',
                ObjectSerializer::toPathValue($user_token),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($load_txn)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($load_txn));
            } else {
                $httpBody = $load_txn;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation resendLoadNotification
     *
     * Resend Load Notification
     *
     * @param  string $user_token Token representing the user to load/fetch loads for (required)
     * @param  string $load_token Load token (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resendLoadNotification'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MassPayPhpSdk\Model\ResendLoadNotification200Response
     */
    public function resendLoadNotification($user_token, $load_token, $idempotency_key = null, string $contentType = self::contentTypes['resendLoadNotification'][0])
    {
        list($response) = $this->resendLoadNotificationWithHttpInfo($user_token, $load_token, $idempotency_key, $contentType);
        return $response;
    }

    /**
     * Operation resendLoadNotificationWithHttpInfo
     *
     * Resend Load Notification
     *
     * @param  string $user_token Token representing the user to load/fetch loads for (required)
     * @param  string $load_token Load token (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resendLoadNotification'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MassPayPhpSdk\Model\ResendLoadNotification200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function resendLoadNotificationWithHttpInfo($user_token, $load_token, $idempotency_key = null, string $contentType = self::contentTypes['resendLoadNotification'][0])
    {
        $request = $this->resendLoadNotificationRequest($user_token, $load_token, $idempotency_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MassPayPhpSdk\Model\ResendLoadNotification200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MassPayPhpSdk\Model\ResendLoadNotification200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MassPayPhpSdk\Model\ResendLoadNotification200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MassPayPhpSdk\Model\ResendLoadNotification200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MassPayPhpSdk\Model\ResendLoadNotification200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation resendLoadNotificationAsync
     *
     * Resend Load Notification
     *
     * @param  string $user_token Token representing the user to load/fetch loads for (required)
     * @param  string $load_token Load token (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resendLoadNotification'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resendLoadNotificationAsync($user_token, $load_token, $idempotency_key = null, string $contentType = self::contentTypes['resendLoadNotification'][0])
    {
        return $this->resendLoadNotificationAsyncWithHttpInfo($user_token, $load_token, $idempotency_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation resendLoadNotificationAsyncWithHttpInfo
     *
     * Resend Load Notification
     *
     * @param  string $user_token Token representing the user to load/fetch loads for (required)
     * @param  string $load_token Load token (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resendLoadNotification'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resendLoadNotificationAsyncWithHttpInfo($user_token, $load_token, $idempotency_key = null, string $contentType = self::contentTypes['resendLoadNotification'][0])
    {
        $returnType = '\MassPayPhpSdk\Model\ResendLoadNotification200Response';
        $request = $this->resendLoadNotificationRequest($user_token, $load_token, $idempotency_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'resendLoadNotification'
     *
     * @param  string $user_token Token representing the user to load/fetch loads for (required)
     * @param  string $load_token Load token (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resendLoadNotification'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function resendLoadNotificationRequest($user_token, $load_token, $idempotency_key = null, string $contentType = self::contentTypes['resendLoadNotification'][0])
    {

        // verify the required parameter 'user_token' is set
        if ($user_token === null || (is_array($user_token) && count($user_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_token when calling resendLoadNotification'
            );
        }

        // verify the required parameter 'load_token' is set
        if ($load_token === null || (is_array($load_token) && count($load_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $load_token when calling resendLoadNotification'
            );
        }



        $resourcePath = '/load/{user_token}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $load_token,
            'load_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);

        // header params
        if ($idempotency_key !== null) {
            $headerParams['Idempotency-Key'] = ObjectSerializer::toHeaderValue($idempotency_key);
        }

        // path params
        if ($user_token !== null) {
            $resourcePath = str_replace(
                '{' . 'user_token' . '}',
                ObjectSerializer::toPathValue($user_token),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
