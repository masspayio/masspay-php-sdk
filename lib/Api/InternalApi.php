<?php
/**
 * InternalApi
 * PHP version 7.4
 *
 * @category Class
 * @package  MassPayPhpSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MassPay API
 *
 * MassPay API
 *
 * The version of the OpenAPI document: 0.1.4
 * Contact: info@masspay.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MassPayPhpSdk\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use MassPayPhpSdk\ApiException;
use MassPayPhpSdk\Configuration;
use MassPayPhpSdk\HeaderSelector;
use MassPayPhpSdk\ObjectSerializer;

/**
 * InternalApi Class Doc Comment
 *
 * @category Class
 * @package  MassPayPhpSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InternalApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'commitPayoutTxnInternal' => [
            'application/json',
        ],
        'decryptStatementJWT' => [
            'application/json',
        ],
        'distributorsBalances' => [
            'application/json',
        ],
        'generateInvoice' => [
            'application/json',
        ],
        'generatePricingList' => [
            'application/json',
        ],
        'getCallbackCompanyId' => [
            'application/json',
        ],
        'getDevelopmentTest' => [
            'application/json',
        ],
        'initiatePayoutInternal' => [
            'application/json',
        ],
        'postAccountApiKey' => [
            'application/json',
        ],
        'postCallbackCompanyId' => [
            'application/json',
        ],
        'updateUserInternal' => [
            'application/json',
        ],
        'uploadBatch' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation commitPayoutTxnInternal
     *
     * Commit payout transaction
     *
     * @param  string $user_token Token representing the user to pay out (required)
     * @param  string $payout_token Token representing the trsanaction. Retrieved from &#x60;/payout/{user_token}&#x60; (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['commitPayoutTxnInternal'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MassPayPhpSdk\Model\PayoutTxnCommitResp|\MassPayPhpSdk\Model\Exception
     */
    public function commitPayoutTxnInternal($user_token, $payout_token, $idempotency_key = null, string $contentType = self::contentTypes['commitPayoutTxnInternal'][0])
    {
        list($response) = $this->commitPayoutTxnInternalWithHttpInfo($user_token, $payout_token, $idempotency_key, $contentType);
        return $response;
    }

    /**
     * Operation commitPayoutTxnInternalWithHttpInfo
     *
     * Commit payout transaction
     *
     * @param  string $user_token Token representing the user to pay out (required)
     * @param  string $payout_token Token representing the trsanaction. Retrieved from &#x60;/payout/{user_token}&#x60; (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['commitPayoutTxnInternal'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MassPayPhpSdk\Model\PayoutTxnCommitResp|\MassPayPhpSdk\Model\Exception, HTTP status code, HTTP response headers (array of strings)
     */
    public function commitPayoutTxnInternalWithHttpInfo($user_token, $payout_token, $idempotency_key = null, string $contentType = self::contentTypes['commitPayoutTxnInternal'][0])
    {
        $request = $this->commitPayoutTxnInternalRequest($user_token, $payout_token, $idempotency_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MassPayPhpSdk\Model\PayoutTxnCommitResp' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MassPayPhpSdk\Model\PayoutTxnCommitResp' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MassPayPhpSdk\Model\PayoutTxnCommitResp', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\MassPayPhpSdk\Model\Exception' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MassPayPhpSdk\Model\Exception' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MassPayPhpSdk\Model\Exception', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MassPayPhpSdk\Model\PayoutTxnCommitResp';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MassPayPhpSdk\Model\PayoutTxnCommitResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MassPayPhpSdk\Model\Exception',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation commitPayoutTxnInternalAsync
     *
     * Commit payout transaction
     *
     * @param  string $user_token Token representing the user to pay out (required)
     * @param  string $payout_token Token representing the trsanaction. Retrieved from &#x60;/payout/{user_token}&#x60; (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['commitPayoutTxnInternal'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function commitPayoutTxnInternalAsync($user_token, $payout_token, $idempotency_key = null, string $contentType = self::contentTypes['commitPayoutTxnInternal'][0])
    {
        return $this->commitPayoutTxnInternalAsyncWithHttpInfo($user_token, $payout_token, $idempotency_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation commitPayoutTxnInternalAsyncWithHttpInfo
     *
     * Commit payout transaction
     *
     * @param  string $user_token Token representing the user to pay out (required)
     * @param  string $payout_token Token representing the trsanaction. Retrieved from &#x60;/payout/{user_token}&#x60; (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['commitPayoutTxnInternal'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function commitPayoutTxnInternalAsyncWithHttpInfo($user_token, $payout_token, $idempotency_key = null, string $contentType = self::contentTypes['commitPayoutTxnInternal'][0])
    {
        $returnType = '\MassPayPhpSdk\Model\PayoutTxnCommitResp';
        $request = $this->commitPayoutTxnInternalRequest($user_token, $payout_token, $idempotency_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'commitPayoutTxnInternal'
     *
     * @param  string $user_token Token representing the user to pay out (required)
     * @param  string $payout_token Token representing the trsanaction. Retrieved from &#x60;/payout/{user_token}&#x60; (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['commitPayoutTxnInternal'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function commitPayoutTxnInternalRequest($user_token, $payout_token, $idempotency_key = null, string $contentType = self::contentTypes['commitPayoutTxnInternal'][0])
    {

        // verify the required parameter 'user_token' is set
        if ($user_token === null || (is_array($user_token) && count($user_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_token when calling commitPayoutTxnInternal'
            );
        }

        // verify the required parameter 'payout_token' is set
        if ($payout_token === null || (is_array($payout_token) && count($payout_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payout_token when calling commitPayoutTxnInternal'
            );
        }



        $resourcePath = '/payout/{user_token}/{payout_token}/internal';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($idempotency_key !== null) {
            $headerParams['Idempotency-Key'] = ObjectSerializer::toHeaderValue($idempotency_key);
        }

        // path params
        if ($user_token !== null) {
            $resourcePath = str_replace(
                '{' . 'user_token' . '}',
                ObjectSerializer::toPathValue($user_token),
                $resourcePath
            );
        }
        // path params
        if ($payout_token !== null) {
            $resourcePath = str_replace(
                '{' . 'payout_token' . '}',
                ObjectSerializer::toPathValue($payout_token),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation decryptStatementJWT
     *
     * Decrypt Statement JWT
     *
     * @param  string $token JWT token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['decryptStatementJWT'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array<string,string>
     */
    public function decryptStatementJWT($token, string $contentType = self::contentTypes['decryptStatementJWT'][0])
    {
        list($response) = $this->decryptStatementJWTWithHttpInfo($token, $contentType);
        return $response;
    }

    /**
     * Operation decryptStatementJWTWithHttpInfo
     *
     * Decrypt Statement JWT
     *
     * @param  string $token JWT token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['decryptStatementJWT'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of array<string,string>, HTTP status code, HTTP response headers (array of strings)
     */
    public function decryptStatementJWTWithHttpInfo($token, string $contentType = self::contentTypes['decryptStatementJWT'][0])
    {
        $request = $this->decryptStatementJWTRequest($token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'array<string,string>';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation decryptStatementJWTAsync
     *
     * Decrypt Statement JWT
     *
     * @param  string $token JWT token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['decryptStatementJWT'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function decryptStatementJWTAsync($token, string $contentType = self::contentTypes['decryptStatementJWT'][0])
    {
        return $this->decryptStatementJWTAsyncWithHttpInfo($token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation decryptStatementJWTAsyncWithHttpInfo
     *
     * Decrypt Statement JWT
     *
     * @param  string $token JWT token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['decryptStatementJWT'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function decryptStatementJWTAsyncWithHttpInfo($token, string $contentType = self::contentTypes['decryptStatementJWT'][0])
    {
        $returnType = 'array<string,string>';
        $request = $this->decryptStatementJWTRequest($token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'decryptStatementJWT'
     *
     * @param  string $token JWT token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['decryptStatementJWT'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function decryptStatementJWTRequest($token, string $contentType = self::contentTypes['decryptStatementJWT'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling decryptStatementJWT'
            );
        }


        $resourcePath = '/decrypt-statement-JWT';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation distributorsBalances
     *
     * Retrieve available balances at distributors
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['distributorsBalances'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MassPayPhpSdk\Model\DistributorsBalances200ResponseInner[]
     */
    public function distributorsBalances(string $contentType = self::contentTypes['distributorsBalances'][0])
    {
        list($response) = $this->distributorsBalancesWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation distributorsBalancesWithHttpInfo
     *
     * Retrieve available balances at distributors
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['distributorsBalances'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MassPayPhpSdk\Model\DistributorsBalances200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function distributorsBalancesWithHttpInfo(string $contentType = self::contentTypes['distributorsBalances'][0])
    {
        $request = $this->distributorsBalancesRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MassPayPhpSdk\Model\DistributorsBalances200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MassPayPhpSdk\Model\DistributorsBalances200ResponseInner[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MassPayPhpSdk\Model\DistributorsBalances200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MassPayPhpSdk\Model\DistributorsBalances200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MassPayPhpSdk\Model\DistributorsBalances200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation distributorsBalancesAsync
     *
     * Retrieve available balances at distributors
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['distributorsBalances'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function distributorsBalancesAsync(string $contentType = self::contentTypes['distributorsBalances'][0])
    {
        return $this->distributorsBalancesAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation distributorsBalancesAsyncWithHttpInfo
     *
     * Retrieve available balances at distributors
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['distributorsBalances'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function distributorsBalancesAsyncWithHttpInfo(string $contentType = self::contentTypes['distributorsBalances'][0])
    {
        $returnType = '\MassPayPhpSdk\Model\DistributorsBalances200ResponseInner[]';
        $request = $this->distributorsBalancesRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'distributorsBalances'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['distributorsBalances'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function distributorsBalancesRequest(string $contentType = self::contentTypes['distributorsBalances'][0])
    {


        $resourcePath = '/distributors/balances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation generateInvoice
     *
     * Generate Invoice
     *
     * @param  string $user_token Token representing the user to pay out (required)
     * @param  string $payout_token Token representing the trsanaction. Retrieved from &#x60;/payout/{user_token}&#x60; (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateInvoice'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MassPayPhpSdk\Model\GenerateInvoice200Response
     */
    public function generateInvoice($user_token, $payout_token, $idempotency_key = null, string $contentType = self::contentTypes['generateInvoice'][0])
    {
        list($response) = $this->generateInvoiceWithHttpInfo($user_token, $payout_token, $idempotency_key, $contentType);
        return $response;
    }

    /**
     * Operation generateInvoiceWithHttpInfo
     *
     * Generate Invoice
     *
     * @param  string $user_token Token representing the user to pay out (required)
     * @param  string $payout_token Token representing the trsanaction. Retrieved from &#x60;/payout/{user_token}&#x60; (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateInvoice'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MassPayPhpSdk\Model\GenerateInvoice200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function generateInvoiceWithHttpInfo($user_token, $payout_token, $idempotency_key = null, string $contentType = self::contentTypes['generateInvoice'][0])
    {
        $request = $this->generateInvoiceRequest($user_token, $payout_token, $idempotency_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MassPayPhpSdk\Model\GenerateInvoice200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MassPayPhpSdk\Model\GenerateInvoice200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MassPayPhpSdk\Model\GenerateInvoice200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MassPayPhpSdk\Model\GenerateInvoice200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MassPayPhpSdk\Model\GenerateInvoice200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation generateInvoiceAsync
     *
     * Generate Invoice
     *
     * @param  string $user_token Token representing the user to pay out (required)
     * @param  string $payout_token Token representing the trsanaction. Retrieved from &#x60;/payout/{user_token}&#x60; (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generateInvoiceAsync($user_token, $payout_token, $idempotency_key = null, string $contentType = self::contentTypes['generateInvoice'][0])
    {
        return $this->generateInvoiceAsyncWithHttpInfo($user_token, $payout_token, $idempotency_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation generateInvoiceAsyncWithHttpInfo
     *
     * Generate Invoice
     *
     * @param  string $user_token Token representing the user to pay out (required)
     * @param  string $payout_token Token representing the trsanaction. Retrieved from &#x60;/payout/{user_token}&#x60; (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generateInvoiceAsyncWithHttpInfo($user_token, $payout_token, $idempotency_key = null, string $contentType = self::contentTypes['generateInvoice'][0])
    {
        $returnType = '\MassPayPhpSdk\Model\GenerateInvoice200Response';
        $request = $this->generateInvoiceRequest($user_token, $payout_token, $idempotency_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'generateInvoice'
     *
     * @param  string $user_token Token representing the user to pay out (required)
     * @param  string $payout_token Token representing the trsanaction. Retrieved from &#x60;/payout/{user_token}&#x60; (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function generateInvoiceRequest($user_token, $payout_token, $idempotency_key = null, string $contentType = self::contentTypes['generateInvoice'][0])
    {

        // verify the required parameter 'user_token' is set
        if ($user_token === null || (is_array($user_token) && count($user_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_token when calling generateInvoice'
            );
        }

        // verify the required parameter 'payout_token' is set
        if ($payout_token === null || (is_array($payout_token) && count($payout_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payout_token when calling generateInvoice'
            );
        }



        $resourcePath = '/payout/{user_token}/{payout_token}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($idempotency_key !== null) {
            $headerParams['Idempotency-Key'] = ObjectSerializer::toHeaderValue($idempotency_key);
        }

        // path params
        if ($user_token !== null) {
            $resourcePath = str_replace(
                '{' . 'user_token' . '}',
                ObjectSerializer::toPathValue($user_token),
                $resourcePath
            );
        }
        // path params
        if ($payout_token !== null) {
            $resourcePath = str_replace(
                '{' . 'payout_token' . '}',
                ObjectSerializer::toPathValue($payout_token),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'OPTIONS',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation generatePricingList
     *
     * Generate pricing list
     *
     * @param  \MassPayPhpSdk\Model\GeneratePricingListRequest $generate_pricing_list_request generate_pricing_list_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generatePricingList'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function generatePricingList($generate_pricing_list_request = null, string $contentType = self::contentTypes['generatePricingList'][0])
    {
        $this->generatePricingListWithHttpInfo($generate_pricing_list_request, $contentType);
    }

    /**
     * Operation generatePricingListWithHttpInfo
     *
     * Generate pricing list
     *
     * @param  \MassPayPhpSdk\Model\GeneratePricingListRequest $generate_pricing_list_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generatePricingList'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function generatePricingListWithHttpInfo($generate_pricing_list_request = null, string $contentType = self::contentTypes['generatePricingList'][0])
    {
        $request = $this->generatePricingListRequest($generate_pricing_list_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MassPayPhpSdk\Model\Exception',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation generatePricingListAsync
     *
     * Generate pricing list
     *
     * @param  \MassPayPhpSdk\Model\GeneratePricingListRequest $generate_pricing_list_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generatePricingList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generatePricingListAsync($generate_pricing_list_request = null, string $contentType = self::contentTypes['generatePricingList'][0])
    {
        return $this->generatePricingListAsyncWithHttpInfo($generate_pricing_list_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation generatePricingListAsyncWithHttpInfo
     *
     * Generate pricing list
     *
     * @param  \MassPayPhpSdk\Model\GeneratePricingListRequest $generate_pricing_list_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generatePricingList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generatePricingListAsyncWithHttpInfo($generate_pricing_list_request = null, string $contentType = self::contentTypes['generatePricingList'][0])
    {
        $returnType = '';
        $request = $this->generatePricingListRequest($generate_pricing_list_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'generatePricingList'
     *
     * @param  \MassPayPhpSdk\Model\GeneratePricingListRequest $generate_pricing_list_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generatePricingList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function generatePricingListRequest($generate_pricing_list_request = null, string $contentType = self::contentTypes['generatePricingList'][0])
    {



        $resourcePath = '/generate_pricing_list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($generate_pricing_list_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($generate_pricing_list_request));
            } else {
                $httpBody = $generate_pricing_list_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCallbackCompanyId
     *
     * Transaction Status Callback
     *
     * @param  string $company_id company_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCallbackCompanyId'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getCallbackCompanyId($company_id, string $contentType = self::contentTypes['getCallbackCompanyId'][0])
    {
        $this->getCallbackCompanyIdWithHttpInfo($company_id, $contentType);
    }

    /**
     * Operation getCallbackCompanyIdWithHttpInfo
     *
     * Transaction Status Callback
     *
     * @param  string $company_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCallbackCompanyId'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCallbackCompanyIdWithHttpInfo($company_id, string $contentType = self::contentTypes['getCallbackCompanyId'][0])
    {
        $request = $this->getCallbackCompanyIdRequest($company_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getCallbackCompanyIdAsync
     *
     * Transaction Status Callback
     *
     * @param  string $company_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCallbackCompanyId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCallbackCompanyIdAsync($company_id, string $contentType = self::contentTypes['getCallbackCompanyId'][0])
    {
        return $this->getCallbackCompanyIdAsyncWithHttpInfo($company_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCallbackCompanyIdAsyncWithHttpInfo
     *
     * Transaction Status Callback
     *
     * @param  string $company_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCallbackCompanyId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCallbackCompanyIdAsyncWithHttpInfo($company_id, string $contentType = self::contentTypes['getCallbackCompanyId'][0])
    {
        $returnType = '';
        $request = $this->getCallbackCompanyIdRequest($company_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCallbackCompanyId'
     *
     * @param  string $company_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCallbackCompanyId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCallbackCompanyIdRequest($company_id, string $contentType = self::contentTypes['getCallbackCompanyId'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling getCallbackCompanyId'
            );
        }


        $resourcePath = '/callback/{company_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDevelopmentTest
     *
     * Development
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDevelopmentTest'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getDevelopmentTest(string $contentType = self::contentTypes['getDevelopmentTest'][0])
    {
        $this->getDevelopmentTestWithHttpInfo($contentType);
    }

    /**
     * Operation getDevelopmentTestWithHttpInfo
     *
     * Development
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDevelopmentTest'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDevelopmentTestWithHttpInfo(string $contentType = self::contentTypes['getDevelopmentTest'][0])
    {
        $request = $this->getDevelopmentTestRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getDevelopmentTestAsync
     *
     * Development
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDevelopmentTest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDevelopmentTestAsync(string $contentType = self::contentTypes['getDevelopmentTest'][0])
    {
        return $this->getDevelopmentTestAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDevelopmentTestAsyncWithHttpInfo
     *
     * Development
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDevelopmentTest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDevelopmentTestAsyncWithHttpInfo(string $contentType = self::contentTypes['getDevelopmentTest'][0])
    {
        $returnType = '';
        $request = $this->getDevelopmentTestRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDevelopmentTest'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDevelopmentTest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDevelopmentTestRequest(string $contentType = self::contentTypes['getDevelopmentTest'][0])
    {


        $resourcePath = '/development/test';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation initiatePayoutInternal
     *
     * Initiate a payout transaction
     *
     * @param  string $user_token Token representing the user to pay out (required)
     * @param  \MassPayPhpSdk\Model\PayoutTxn $payout_txn Payout parameters for a quote (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  float $limit Limit amount for transaction amount + fee. If fee + amount are higher than the limit, the output will automatically adjust to maximize the possible amount sent (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['initiatePayoutInternal'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MassPayPhpSdk\Model\PayoutTxnResp|\MassPayPhpSdk\Model\Exception
     */
    public function initiatePayoutInternal($user_token, $payout_txn, $idempotency_key = null, $limit = null, string $contentType = self::contentTypes['initiatePayoutInternal'][0])
    {
        list($response) = $this->initiatePayoutInternalWithHttpInfo($user_token, $payout_txn, $idempotency_key, $limit, $contentType);
        return $response;
    }

    /**
     * Operation initiatePayoutInternalWithHttpInfo
     *
     * Initiate a payout transaction
     *
     * @param  string $user_token Token representing the user to pay out (required)
     * @param  \MassPayPhpSdk\Model\PayoutTxn $payout_txn Payout parameters for a quote (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  float $limit Limit amount for transaction amount + fee. If fee + amount are higher than the limit, the output will automatically adjust to maximize the possible amount sent (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['initiatePayoutInternal'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MassPayPhpSdk\Model\PayoutTxnResp|\MassPayPhpSdk\Model\Exception, HTTP status code, HTTP response headers (array of strings)
     */
    public function initiatePayoutInternalWithHttpInfo($user_token, $payout_txn, $idempotency_key = null, $limit = null, string $contentType = self::contentTypes['initiatePayoutInternal'][0])
    {
        $request = $this->initiatePayoutInternalRequest($user_token, $payout_txn, $idempotency_key, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MassPayPhpSdk\Model\PayoutTxnResp' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MassPayPhpSdk\Model\PayoutTxnResp' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MassPayPhpSdk\Model\PayoutTxnResp', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\MassPayPhpSdk\Model\Exception' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MassPayPhpSdk\Model\Exception' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MassPayPhpSdk\Model\Exception', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MassPayPhpSdk\Model\PayoutTxnResp';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MassPayPhpSdk\Model\PayoutTxnResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MassPayPhpSdk\Model\Exception',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation initiatePayoutInternalAsync
     *
     * Initiate a payout transaction
     *
     * @param  string $user_token Token representing the user to pay out (required)
     * @param  \MassPayPhpSdk\Model\PayoutTxn $payout_txn Payout parameters for a quote (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  float $limit Limit amount for transaction amount + fee. If fee + amount are higher than the limit, the output will automatically adjust to maximize the possible amount sent (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['initiatePayoutInternal'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function initiatePayoutInternalAsync($user_token, $payout_txn, $idempotency_key = null, $limit = null, string $contentType = self::contentTypes['initiatePayoutInternal'][0])
    {
        return $this->initiatePayoutInternalAsyncWithHttpInfo($user_token, $payout_txn, $idempotency_key, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation initiatePayoutInternalAsyncWithHttpInfo
     *
     * Initiate a payout transaction
     *
     * @param  string $user_token Token representing the user to pay out (required)
     * @param  \MassPayPhpSdk\Model\PayoutTxn $payout_txn Payout parameters for a quote (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  float $limit Limit amount for transaction amount + fee. If fee + amount are higher than the limit, the output will automatically adjust to maximize the possible amount sent (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['initiatePayoutInternal'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function initiatePayoutInternalAsyncWithHttpInfo($user_token, $payout_txn, $idempotency_key = null, $limit = null, string $contentType = self::contentTypes['initiatePayoutInternal'][0])
    {
        $returnType = '\MassPayPhpSdk\Model\PayoutTxnResp';
        $request = $this->initiatePayoutInternalRequest($user_token, $payout_txn, $idempotency_key, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'initiatePayoutInternal'
     *
     * @param  string $user_token Token representing the user to pay out (required)
     * @param  \MassPayPhpSdk\Model\PayoutTxn $payout_txn Payout parameters for a quote (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  float $limit Limit amount for transaction amount + fee. If fee + amount are higher than the limit, the output will automatically adjust to maximize the possible amount sent (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['initiatePayoutInternal'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function initiatePayoutInternalRequest($user_token, $payout_txn, $idempotency_key = null, $limit = null, string $contentType = self::contentTypes['initiatePayoutInternal'][0])
    {

        // verify the required parameter 'user_token' is set
        if ($user_token === null || (is_array($user_token) && count($user_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_token when calling initiatePayoutInternal'
            );
        }

        // verify the required parameter 'payout_txn' is set
        if ($payout_txn === null || (is_array($payout_txn) && count($payout_txn) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payout_txn when calling initiatePayoutInternal'
            );
        }


        if ($limit !== null && !preg_match("/^[\\d.]+$/", $limit)) {
            throw new \InvalidArgumentException("invalid value for \"limit\" when calling InternalApi.initiatePayoutInternal, must conform to the pattern /^[\\d.]+$/.");
        }
        

        $resourcePath = '/payout/{user_token}/internal';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($idempotency_key !== null) {
            $headerParams['Idempotency-Key'] = ObjectSerializer::toHeaderValue($idempotency_key);
        }

        // path params
        if ($user_token !== null) {
            $resourcePath = str_replace(
                '{' . 'user_token' . '}',
                ObjectSerializer::toPathValue($user_token),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($payout_txn)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($payout_txn));
            } else {
                $httpBody = $payout_txn;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postAccountApiKey
     *
     * Generate API Key
     *
     * @param  \MassPayPhpSdk\Model\PostAccountApiKeyRequest $post_account_api_key_request post_account_api_key_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAccountApiKey'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MassPayPhpSdk\Model\PostAccountApiKey200Response
     */
    public function postAccountApiKey($post_account_api_key_request = null, string $contentType = self::contentTypes['postAccountApiKey'][0])
    {
        list($response) = $this->postAccountApiKeyWithHttpInfo($post_account_api_key_request, $contentType);
        return $response;
    }

    /**
     * Operation postAccountApiKeyWithHttpInfo
     *
     * Generate API Key
     *
     * @param  \MassPayPhpSdk\Model\PostAccountApiKeyRequest $post_account_api_key_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAccountApiKey'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MassPayPhpSdk\Model\PostAccountApiKey200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postAccountApiKeyWithHttpInfo($post_account_api_key_request = null, string $contentType = self::contentTypes['postAccountApiKey'][0])
    {
        $request = $this->postAccountApiKeyRequest($post_account_api_key_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MassPayPhpSdk\Model\PostAccountApiKey200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MassPayPhpSdk\Model\PostAccountApiKey200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MassPayPhpSdk\Model\PostAccountApiKey200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MassPayPhpSdk\Model\PostAccountApiKey200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MassPayPhpSdk\Model\PostAccountApiKey200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postAccountApiKeyAsync
     *
     * Generate API Key
     *
     * @param  \MassPayPhpSdk\Model\PostAccountApiKeyRequest $post_account_api_key_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAccountApiKey'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAccountApiKeyAsync($post_account_api_key_request = null, string $contentType = self::contentTypes['postAccountApiKey'][0])
    {
        return $this->postAccountApiKeyAsyncWithHttpInfo($post_account_api_key_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postAccountApiKeyAsyncWithHttpInfo
     *
     * Generate API Key
     *
     * @param  \MassPayPhpSdk\Model\PostAccountApiKeyRequest $post_account_api_key_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAccountApiKey'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAccountApiKeyAsyncWithHttpInfo($post_account_api_key_request = null, string $contentType = self::contentTypes['postAccountApiKey'][0])
    {
        $returnType = '\MassPayPhpSdk\Model\PostAccountApiKey200Response';
        $request = $this->postAccountApiKeyRequest($post_account_api_key_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postAccountApiKey'
     *
     * @param  \MassPayPhpSdk\Model\PostAccountApiKeyRequest $post_account_api_key_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAccountApiKey'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postAccountApiKeyRequest($post_account_api_key_request = null, string $contentType = self::contentTypes['postAccountApiKey'][0])
    {



        $resourcePath = '/account/api-key';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_account_api_key_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_account_api_key_request));
            } else {
                $httpBody = $post_account_api_key_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postCallbackCompanyId
     *
     * Transaction Status Callback
     *
     * @param  string $company_id company_id (required)
     * @param  object $body body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCallbackCompanyId'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postCallbackCompanyId($company_id, $body = null, string $contentType = self::contentTypes['postCallbackCompanyId'][0])
    {
        $this->postCallbackCompanyIdWithHttpInfo($company_id, $body, $contentType);
    }

    /**
     * Operation postCallbackCompanyIdWithHttpInfo
     *
     * Transaction Status Callback
     *
     * @param  string $company_id (required)
     * @param  object $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCallbackCompanyId'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postCallbackCompanyIdWithHttpInfo($company_id, $body = null, string $contentType = self::contentTypes['postCallbackCompanyId'][0])
    {
        $request = $this->postCallbackCompanyIdRequest($company_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postCallbackCompanyIdAsync
     *
     * Transaction Status Callback
     *
     * @param  string $company_id (required)
     * @param  object $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCallbackCompanyId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCallbackCompanyIdAsync($company_id, $body = null, string $contentType = self::contentTypes['postCallbackCompanyId'][0])
    {
        return $this->postCallbackCompanyIdAsyncWithHttpInfo($company_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postCallbackCompanyIdAsyncWithHttpInfo
     *
     * Transaction Status Callback
     *
     * @param  string $company_id (required)
     * @param  object $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCallbackCompanyId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCallbackCompanyIdAsyncWithHttpInfo($company_id, $body = null, string $contentType = self::contentTypes['postCallbackCompanyId'][0])
    {
        $returnType = '';
        $request = $this->postCallbackCompanyIdRequest($company_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postCallbackCompanyId'
     *
     * @param  string $company_id (required)
     * @param  object $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCallbackCompanyId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postCallbackCompanyIdRequest($company_id, $body = null, string $contentType = self::contentTypes['postCallbackCompanyId'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling postCallbackCompanyId'
            );
        }



        $resourcePath = '/callback/{company_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateUserInternal
     *
     * Internal user update
     *
     * @param  string $user_token user token that need to be updated (required)
     * @param  \MassPayPhpSdk\Model\UpdateUser $update_user Updated user object (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  bool $is_compliance_update Whether this update was completed by compliance team (optional)
     * @param  string $employee_username Hashed username of the employee making the update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateUserInternal'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MassPayPhpSdk\Model\StoredUser
     */
    public function updateUserInternal($user_token, $update_user, $idempotency_key = null, $is_compliance_update = null, $employee_username = null, string $contentType = self::contentTypes['updateUserInternal'][0])
    {
        list($response) = $this->updateUserInternalWithHttpInfo($user_token, $update_user, $idempotency_key, $is_compliance_update, $employee_username, $contentType);
        return $response;
    }

    /**
     * Operation updateUserInternalWithHttpInfo
     *
     * Internal user update
     *
     * @param  string $user_token user token that need to be updated (required)
     * @param  \MassPayPhpSdk\Model\UpdateUser $update_user Updated user object (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  bool $is_compliance_update Whether this update was completed by compliance team (optional)
     * @param  string $employee_username Hashed username of the employee making the update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateUserInternal'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MassPayPhpSdk\Model\StoredUser, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateUserInternalWithHttpInfo($user_token, $update_user, $idempotency_key = null, $is_compliance_update = null, $employee_username = null, string $contentType = self::contentTypes['updateUserInternal'][0])
    {
        $request = $this->updateUserInternalRequest($user_token, $update_user, $idempotency_key, $is_compliance_update, $employee_username, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MassPayPhpSdk\Model\StoredUser' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MassPayPhpSdk\Model\StoredUser' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MassPayPhpSdk\Model\StoredUser', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MassPayPhpSdk\Model\StoredUser';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MassPayPhpSdk\Model\StoredUser',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateUserInternalAsync
     *
     * Internal user update
     *
     * @param  string $user_token user token that need to be updated (required)
     * @param  \MassPayPhpSdk\Model\UpdateUser $update_user Updated user object (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  bool $is_compliance_update Whether this update was completed by compliance team (optional)
     * @param  string $employee_username Hashed username of the employee making the update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateUserInternal'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateUserInternalAsync($user_token, $update_user, $idempotency_key = null, $is_compliance_update = null, $employee_username = null, string $contentType = self::contentTypes['updateUserInternal'][0])
    {
        return $this->updateUserInternalAsyncWithHttpInfo($user_token, $update_user, $idempotency_key, $is_compliance_update, $employee_username, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateUserInternalAsyncWithHttpInfo
     *
     * Internal user update
     *
     * @param  string $user_token user token that need to be updated (required)
     * @param  \MassPayPhpSdk\Model\UpdateUser $update_user Updated user object (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  bool $is_compliance_update Whether this update was completed by compliance team (optional)
     * @param  string $employee_username Hashed username of the employee making the update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateUserInternal'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateUserInternalAsyncWithHttpInfo($user_token, $update_user, $idempotency_key = null, $is_compliance_update = null, $employee_username = null, string $contentType = self::contentTypes['updateUserInternal'][0])
    {
        $returnType = '\MassPayPhpSdk\Model\StoredUser';
        $request = $this->updateUserInternalRequest($user_token, $update_user, $idempotency_key, $is_compliance_update, $employee_username, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateUserInternal'
     *
     * @param  string $user_token user token that need to be updated (required)
     * @param  \MassPayPhpSdk\Model\UpdateUser $update_user Updated user object (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  bool $is_compliance_update Whether this update was completed by compliance team (optional)
     * @param  string $employee_username Hashed username of the employee making the update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateUserInternal'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateUserInternalRequest($user_token, $update_user, $idempotency_key = null, $is_compliance_update = null, $employee_username = null, string $contentType = self::contentTypes['updateUserInternal'][0])
    {

        // verify the required parameter 'user_token' is set
        if ($user_token === null || (is_array($user_token) && count($user_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_token when calling updateUserInternal'
            );
        }

        // verify the required parameter 'update_user' is set
        if ($update_user === null || (is_array($update_user) && count($update_user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_user when calling updateUserInternal'
            );
        }





        $resourcePath = '/user/{user_token}/internal';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_compliance_update,
            'is_compliance_update', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $employee_username,
            'employee_username', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($idempotency_key !== null) {
            $headerParams['Idempotency-Key'] = ObjectSerializer::toHeaderValue($idempotency_key);
        }

        // path params
        if ($user_token !== null) {
            $resourcePath = str_replace(
                '{' . 'user_token' . '}',
                ObjectSerializer::toPathValue($user_token),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_user)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_user));
            } else {
                $httpBody = $update_user;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation uploadBatch
     *
     * Upload a batch
     *
     * @param  \MassPayPhpSdk\Model\UploadBatchRequest $upload_batch_request upload_batch_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadBatch'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function uploadBatch($upload_batch_request = null, string $contentType = self::contentTypes['uploadBatch'][0])
    {
        $this->uploadBatchWithHttpInfo($upload_batch_request, $contentType);
    }

    /**
     * Operation uploadBatchWithHttpInfo
     *
     * Upload a batch
     *
     * @param  \MassPayPhpSdk\Model\UploadBatchRequest $upload_batch_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadBatch'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function uploadBatchWithHttpInfo($upload_batch_request = null, string $contentType = self::contentTypes['uploadBatch'][0])
    {
        $request = $this->uploadBatchRequest($upload_batch_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MassPayPhpSdk\Model\Exception',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation uploadBatchAsync
     *
     * Upload a batch
     *
     * @param  \MassPayPhpSdk\Model\UploadBatchRequest $upload_batch_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadBatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadBatchAsync($upload_batch_request = null, string $contentType = self::contentTypes['uploadBatch'][0])
    {
        return $this->uploadBatchAsyncWithHttpInfo($upload_batch_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation uploadBatchAsyncWithHttpInfo
     *
     * Upload a batch
     *
     * @param  \MassPayPhpSdk\Model\UploadBatchRequest $upload_batch_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadBatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadBatchAsyncWithHttpInfo($upload_batch_request = null, string $contentType = self::contentTypes['uploadBatch'][0])
    {
        $returnType = '';
        $request = $this->uploadBatchRequest($upload_batch_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'uploadBatch'
     *
     * @param  \MassPayPhpSdk\Model\UploadBatchRequest $upload_batch_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadBatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function uploadBatchRequest($upload_batch_request = null, string $contentType = self::contentTypes['uploadBatch'][0])
    {



        $resourcePath = '/batch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($upload_batch_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($upload_batch_request));
            } else {
                $httpBody = $upload_batch_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
