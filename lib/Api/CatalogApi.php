<?php
/**
 * CatalogApi
 * PHP version 7.4
 *
 * @category Class
 * @package  MassPayPhpSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MassPay API
 *
 * MassPay API
 *
 * The version of the OpenAPI document: 0.1.4
 * Contact: info@masspay.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MassPayPhpSdk\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use MassPayPhpSdk\ApiException;
use MassPayPhpSdk\Configuration;
use MassPayPhpSdk\HeaderSelector;
use MassPayPhpSdk\ObjectSerializer;

/**
 * CatalogApi Class Doc Comment
 *
 * @category Class
 * @package  MassPayPhpSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CatalogApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getCheapestCountryServices' => [
            'application/json',
        ],
        'getCountryList' => [
            'application/json',
        ],
        'getCountryServices' => [
            'application/json',
        ],
        'getDestinationTokenAlternatives' => [
            'application/json',
        ],
        'getUserAgreement' => [
            'application/json',
        ],
        'getUserAgreementsNames' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getCheapestCountryServices
     *
     * Gets a list of Companies and their cheapest service offerings for the given country code.
     *
     * @param  string $country_code Country code searching services for. 3 letters [ISO_3166](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) code\&quot; (required)
     * @param  string $amount Returns the results fee based on the given amount, defaults to $200 (optional, default to '200')
     * @param  float $limit Limit amount for transaction amount + fee. If fee + amount are higher than the limit, the output will automatically adjust to maximize the possible amount sent (optional)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $wallet_token Token representing the wallet used. If provided, the results would be custom-tailored to this user. (optional)
     * @param  bool $include_payer_logos Whether to include the payers logo in base64 format. (optional, default to false)
     * @param  string $user_token Token representing the user for which we fetch the catalog. If provided, the results would be custom-tailored to this user. Not necessary if wallet_token is provided (optional)
     * @param  string $source_currency Required if amount is provided. The currency associated with the amount (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheapestCountryServices'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MassPayPhpSdk\Model\CompaniesResp
     */
    public function getCheapestCountryServices($country_code, $amount = '200', $limit = null, $idempotency_key = null, $wallet_token = null, $include_payer_logos = false, $user_token = null, $source_currency = null, string $contentType = self::contentTypes['getCheapestCountryServices'][0])
    {
        list($response) = $this->getCheapestCountryServicesWithHttpInfo($country_code, $amount, $limit, $idempotency_key, $wallet_token, $include_payer_logos, $user_token, $source_currency, $contentType);
        return $response;
    }

    /**
     * Operation getCheapestCountryServicesWithHttpInfo
     *
     * Gets a list of Companies and their cheapest service offerings for the given country code.
     *
     * @param  string $country_code Country code searching services for. 3 letters [ISO_3166](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) code\&quot; (required)
     * @param  string $amount Returns the results fee based on the given amount, defaults to $200 (optional, default to '200')
     * @param  float $limit Limit amount for transaction amount + fee. If fee + amount are higher than the limit, the output will automatically adjust to maximize the possible amount sent (optional)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $wallet_token Token representing the wallet used. If provided, the results would be custom-tailored to this user. (optional)
     * @param  bool $include_payer_logos Whether to include the payers logo in base64 format. (optional, default to false)
     * @param  string $user_token Token representing the user for which we fetch the catalog. If provided, the results would be custom-tailored to this user. Not necessary if wallet_token is provided (optional)
     * @param  string $source_currency Required if amount is provided. The currency associated with the amount (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheapestCountryServices'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MassPayPhpSdk\Model\CompaniesResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCheapestCountryServicesWithHttpInfo($country_code, $amount = '200', $limit = null, $idempotency_key = null, $wallet_token = null, $include_payer_logos = false, $user_token = null, $source_currency = null, string $contentType = self::contentTypes['getCheapestCountryServices'][0])
    {
        $request = $this->getCheapestCountryServicesRequest($country_code, $amount, $limit, $idempotency_key, $wallet_token, $include_payer_logos, $user_token, $source_currency, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MassPayPhpSdk\Model\CompaniesResp' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MassPayPhpSdk\Model\CompaniesResp' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MassPayPhpSdk\Model\CompaniesResp', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MassPayPhpSdk\Model\CompaniesResp';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MassPayPhpSdk\Model\CompaniesResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCheapestCountryServicesAsync
     *
     * Gets a list of Companies and their cheapest service offerings for the given country code.
     *
     * @param  string $country_code Country code searching services for. 3 letters [ISO_3166](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) code\&quot; (required)
     * @param  string $amount Returns the results fee based on the given amount, defaults to $200 (optional, default to '200')
     * @param  float $limit Limit amount for transaction amount + fee. If fee + amount are higher than the limit, the output will automatically adjust to maximize the possible amount sent (optional)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $wallet_token Token representing the wallet used. If provided, the results would be custom-tailored to this user. (optional)
     * @param  bool $include_payer_logos Whether to include the payers logo in base64 format. (optional, default to false)
     * @param  string $user_token Token representing the user for which we fetch the catalog. If provided, the results would be custom-tailored to this user. Not necessary if wallet_token is provided (optional)
     * @param  string $source_currency Required if amount is provided. The currency associated with the amount (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheapestCountryServices'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCheapestCountryServicesAsync($country_code, $amount = '200', $limit = null, $idempotency_key = null, $wallet_token = null, $include_payer_logos = false, $user_token = null, $source_currency = null, string $contentType = self::contentTypes['getCheapestCountryServices'][0])
    {
        return $this->getCheapestCountryServicesAsyncWithHttpInfo($country_code, $amount, $limit, $idempotency_key, $wallet_token, $include_payer_logos, $user_token, $source_currency, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCheapestCountryServicesAsyncWithHttpInfo
     *
     * Gets a list of Companies and their cheapest service offerings for the given country code.
     *
     * @param  string $country_code Country code searching services for. 3 letters [ISO_3166](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) code\&quot; (required)
     * @param  string $amount Returns the results fee based on the given amount, defaults to $200 (optional, default to '200')
     * @param  float $limit Limit amount for transaction amount + fee. If fee + amount are higher than the limit, the output will automatically adjust to maximize the possible amount sent (optional)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $wallet_token Token representing the wallet used. If provided, the results would be custom-tailored to this user. (optional)
     * @param  bool $include_payer_logos Whether to include the payers logo in base64 format. (optional, default to false)
     * @param  string $user_token Token representing the user for which we fetch the catalog. If provided, the results would be custom-tailored to this user. Not necessary if wallet_token is provided (optional)
     * @param  string $source_currency Required if amount is provided. The currency associated with the amount (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheapestCountryServices'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCheapestCountryServicesAsyncWithHttpInfo($country_code, $amount = '200', $limit = null, $idempotency_key = null, $wallet_token = null, $include_payer_logos = false, $user_token = null, $source_currency = null, string $contentType = self::contentTypes['getCheapestCountryServices'][0])
    {
        $returnType = '\MassPayPhpSdk\Model\CompaniesResp';
        $request = $this->getCheapestCountryServicesRequest($country_code, $amount, $limit, $idempotency_key, $wallet_token, $include_payer_logos, $user_token, $source_currency, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCheapestCountryServices'
     *
     * @param  string $country_code Country code searching services for. 3 letters [ISO_3166](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) code\&quot; (required)
     * @param  string $amount Returns the results fee based on the given amount, defaults to $200 (optional, default to '200')
     * @param  float $limit Limit amount for transaction amount + fee. If fee + amount are higher than the limit, the output will automatically adjust to maximize the possible amount sent (optional)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $wallet_token Token representing the wallet used. If provided, the results would be custom-tailored to this user. (optional)
     * @param  bool $include_payer_logos Whether to include the payers logo in base64 format. (optional, default to false)
     * @param  string $user_token Token representing the user for which we fetch the catalog. If provided, the results would be custom-tailored to this user. Not necessary if wallet_token is provided (optional)
     * @param  string $source_currency Required if amount is provided. The currency associated with the amount (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheapestCountryServices'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCheapestCountryServicesRequest($country_code, $amount = '200', $limit = null, $idempotency_key = null, $wallet_token = null, $include_payer_logos = false, $user_token = null, $source_currency = null, string $contentType = self::contentTypes['getCheapestCountryServices'][0])
    {

        // verify the required parameter 'country_code' is set
        if ($country_code === null || (is_array($country_code) && count($country_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $country_code when calling getCheapestCountryServices'
            );
        }


        if ($limit !== null && !preg_match("/^[\\d.]+$/", $limit)) {
            throw new \InvalidArgumentException("invalid value for \"limit\" when calling CatalogApi.getCheapestCountryServices, must conform to the pattern /^[\\d.]+$/.");
        }
        






        $resourcePath = '/country/{country_code}/cheapest';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $amount,
            'amount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $wallet_token,
            'wallet_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_payer_logos,
            'include_payer_logos', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_token,
            'user_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $source_currency,
            'source_currency', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($idempotency_key !== null) {
            $headerParams['Idempotency-Key'] = ObjectSerializer::toHeaderValue($idempotency_key);
        }

        // path params
        if ($country_code !== null) {
            $resourcePath = str_replace(
                '{' . 'country_code' . '}',
                ObjectSerializer::toPathValue($country_code),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCountryList
     *
     * Gets a list of countries where services offered.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCountryList'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MassPayPhpSdk\Model\Country[]
     */
    public function getCountryList(string $contentType = self::contentTypes['getCountryList'][0])
    {
        list($response) = $this->getCountryListWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getCountryListWithHttpInfo
     *
     * Gets a list of countries where services offered.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCountryList'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MassPayPhpSdk\Model\Country[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCountryListWithHttpInfo(string $contentType = self::contentTypes['getCountryList'][0])
    {
        $request = $this->getCountryListRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MassPayPhpSdk\Model\Country[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MassPayPhpSdk\Model\Country[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MassPayPhpSdk\Model\Country[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MassPayPhpSdk\Model\Country[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MassPayPhpSdk\Model\Country[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCountryListAsync
     *
     * Gets a list of countries where services offered.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCountryList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCountryListAsync(string $contentType = self::contentTypes['getCountryList'][0])
    {
        return $this->getCountryListAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCountryListAsyncWithHttpInfo
     *
     * Gets a list of countries where services offered.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCountryList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCountryListAsyncWithHttpInfo(string $contentType = self::contentTypes['getCountryList'][0])
    {
        $returnType = '\MassPayPhpSdk\Model\Country[]';
        $request = $this->getCountryListRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCountryList'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCountryList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCountryListRequest(string $contentType = self::contentTypes['getCountryList'][0])
    {


        $resourcePath = '/country/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCountryServices
     *
     * Gets a list of Companies and their service offerings for the given country code.
     *
     * @param  string $country_code Country code searching services for. 3 letters [ISO_3166](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) code\&quot; (required)
     * @param  string $amount Returns the results fee based on the given amount, defaults to $200 (optional, default to '200')
     * @param  float $limit Limit amount for transaction amount + fee. If fee + amount are higher than the limit, the output will automatically adjust to maximize the possible amount sent (optional)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $wallet_token Token representing the wallet used. If provided, the results would be custom-tailored to this user. Not necessary if user_token is provided (optional)
     * @param  bool $include_payer_logos Whether to include the payers logo in base64 format. (optional, default to false)
     * @param  string $user_token Token representing the user for which we fetch the catalog. If provided, the results would be custom-tailored to this user. Not necessary if wallet_token is provided (optional)
     * @param  string $source_currency Required if amount is provided. The currency associated with the amount (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCountryServices'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MassPayPhpSdk\Model\CompaniesResp
     */
    public function getCountryServices($country_code, $amount = '200', $limit = null, $idempotency_key = null, $wallet_token = null, $include_payer_logos = false, $user_token = null, $source_currency = null, string $contentType = self::contentTypes['getCountryServices'][0])
    {
        list($response) = $this->getCountryServicesWithHttpInfo($country_code, $amount, $limit, $idempotency_key, $wallet_token, $include_payer_logos, $user_token, $source_currency, $contentType);
        return $response;
    }

    /**
     * Operation getCountryServicesWithHttpInfo
     *
     * Gets a list of Companies and their service offerings for the given country code.
     *
     * @param  string $country_code Country code searching services for. 3 letters [ISO_3166](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) code\&quot; (required)
     * @param  string $amount Returns the results fee based on the given amount, defaults to $200 (optional, default to '200')
     * @param  float $limit Limit amount for transaction amount + fee. If fee + amount are higher than the limit, the output will automatically adjust to maximize the possible amount sent (optional)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $wallet_token Token representing the wallet used. If provided, the results would be custom-tailored to this user. Not necessary if user_token is provided (optional)
     * @param  bool $include_payer_logos Whether to include the payers logo in base64 format. (optional, default to false)
     * @param  string $user_token Token representing the user for which we fetch the catalog. If provided, the results would be custom-tailored to this user. Not necessary if wallet_token is provided (optional)
     * @param  string $source_currency Required if amount is provided. The currency associated with the amount (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCountryServices'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MassPayPhpSdk\Model\CompaniesResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCountryServicesWithHttpInfo($country_code, $amount = '200', $limit = null, $idempotency_key = null, $wallet_token = null, $include_payer_logos = false, $user_token = null, $source_currency = null, string $contentType = self::contentTypes['getCountryServices'][0])
    {
        $request = $this->getCountryServicesRequest($country_code, $amount, $limit, $idempotency_key, $wallet_token, $include_payer_logos, $user_token, $source_currency, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MassPayPhpSdk\Model\CompaniesResp' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MassPayPhpSdk\Model\CompaniesResp' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MassPayPhpSdk\Model\CompaniesResp', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MassPayPhpSdk\Model\CompaniesResp';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MassPayPhpSdk\Model\CompaniesResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCountryServicesAsync
     *
     * Gets a list of Companies and their service offerings for the given country code.
     *
     * @param  string $country_code Country code searching services for. 3 letters [ISO_3166](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) code\&quot; (required)
     * @param  string $amount Returns the results fee based on the given amount, defaults to $200 (optional, default to '200')
     * @param  float $limit Limit amount for transaction amount + fee. If fee + amount are higher than the limit, the output will automatically adjust to maximize the possible amount sent (optional)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $wallet_token Token representing the wallet used. If provided, the results would be custom-tailored to this user. Not necessary if user_token is provided (optional)
     * @param  bool $include_payer_logos Whether to include the payers logo in base64 format. (optional, default to false)
     * @param  string $user_token Token representing the user for which we fetch the catalog. If provided, the results would be custom-tailored to this user. Not necessary if wallet_token is provided (optional)
     * @param  string $source_currency Required if amount is provided. The currency associated with the amount (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCountryServices'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCountryServicesAsync($country_code, $amount = '200', $limit = null, $idempotency_key = null, $wallet_token = null, $include_payer_logos = false, $user_token = null, $source_currency = null, string $contentType = self::contentTypes['getCountryServices'][0])
    {
        return $this->getCountryServicesAsyncWithHttpInfo($country_code, $amount, $limit, $idempotency_key, $wallet_token, $include_payer_logos, $user_token, $source_currency, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCountryServicesAsyncWithHttpInfo
     *
     * Gets a list of Companies and their service offerings for the given country code.
     *
     * @param  string $country_code Country code searching services for. 3 letters [ISO_3166](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) code\&quot; (required)
     * @param  string $amount Returns the results fee based on the given amount, defaults to $200 (optional, default to '200')
     * @param  float $limit Limit amount for transaction amount + fee. If fee + amount are higher than the limit, the output will automatically adjust to maximize the possible amount sent (optional)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $wallet_token Token representing the wallet used. If provided, the results would be custom-tailored to this user. Not necessary if user_token is provided (optional)
     * @param  bool $include_payer_logos Whether to include the payers logo in base64 format. (optional, default to false)
     * @param  string $user_token Token representing the user for which we fetch the catalog. If provided, the results would be custom-tailored to this user. Not necessary if wallet_token is provided (optional)
     * @param  string $source_currency Required if amount is provided. The currency associated with the amount (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCountryServices'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCountryServicesAsyncWithHttpInfo($country_code, $amount = '200', $limit = null, $idempotency_key = null, $wallet_token = null, $include_payer_logos = false, $user_token = null, $source_currency = null, string $contentType = self::contentTypes['getCountryServices'][0])
    {
        $returnType = '\MassPayPhpSdk\Model\CompaniesResp';
        $request = $this->getCountryServicesRequest($country_code, $amount, $limit, $idempotency_key, $wallet_token, $include_payer_logos, $user_token, $source_currency, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCountryServices'
     *
     * @param  string $country_code Country code searching services for. 3 letters [ISO_3166](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) code\&quot; (required)
     * @param  string $amount Returns the results fee based on the given amount, defaults to $200 (optional, default to '200')
     * @param  float $limit Limit amount for transaction amount + fee. If fee + amount are higher than the limit, the output will automatically adjust to maximize the possible amount sent (optional)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $wallet_token Token representing the wallet used. If provided, the results would be custom-tailored to this user. Not necessary if user_token is provided (optional)
     * @param  bool $include_payer_logos Whether to include the payers logo in base64 format. (optional, default to false)
     * @param  string $user_token Token representing the user for which we fetch the catalog. If provided, the results would be custom-tailored to this user. Not necessary if wallet_token is provided (optional)
     * @param  string $source_currency Required if amount is provided. The currency associated with the amount (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCountryServices'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCountryServicesRequest($country_code, $amount = '200', $limit = null, $idempotency_key = null, $wallet_token = null, $include_payer_logos = false, $user_token = null, $source_currency = null, string $contentType = self::contentTypes['getCountryServices'][0])
    {

        // verify the required parameter 'country_code' is set
        if ($country_code === null || (is_array($country_code) && count($country_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $country_code when calling getCountryServices'
            );
        }


        if ($limit !== null && !preg_match("/^[\\d.]+$/", $limit)) {
            throw new \InvalidArgumentException("invalid value for \"limit\" when calling CatalogApi.getCountryServices, must conform to the pattern /^[\\d.]+$/.");
        }
        






        $resourcePath = '/country/{country_code}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $amount,
            'amount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $wallet_token,
            'wallet_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_payer_logos,
            'include_payer_logos', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_token,
            'user_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $source_currency,
            'source_currency', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($idempotency_key !== null) {
            $headerParams['Idempotency-Key'] = ObjectSerializer::toHeaderValue($idempotency_key);
        }

        // path params
        if ($country_code !== null) {
            $resourcePath = str_replace(
                '{' . 'country_code' . '}',
                ObjectSerializer::toPathValue($country_code),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDestinationTokenAlternatives
     *
     * Returns list of alternative service to a provided service
     *
     * @param  string $destination_token Destination token (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDestinationTokenAlternatives'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MassPayPhpSdk\Model\Service
     */
    public function getDestinationTokenAlternatives($destination_token, $idempotency_key = null, string $contentType = self::contentTypes['getDestinationTokenAlternatives'][0])
    {
        list($response) = $this->getDestinationTokenAlternativesWithHttpInfo($destination_token, $idempotency_key, $contentType);
        return $response;
    }

    /**
     * Operation getDestinationTokenAlternativesWithHttpInfo
     *
     * Returns list of alternative service to a provided service
     *
     * @param  string $destination_token Destination token (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDestinationTokenAlternatives'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MassPayPhpSdk\Model\Service, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDestinationTokenAlternativesWithHttpInfo($destination_token, $idempotency_key = null, string $contentType = self::contentTypes['getDestinationTokenAlternatives'][0])
    {
        $request = $this->getDestinationTokenAlternativesRequest($destination_token, $idempotency_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MassPayPhpSdk\Model\Service' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MassPayPhpSdk\Model\Service' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MassPayPhpSdk\Model\Service', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MassPayPhpSdk\Model\Service';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MassPayPhpSdk\Model\Service',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDestinationTokenAlternativesAsync
     *
     * Returns list of alternative service to a provided service
     *
     * @param  string $destination_token Destination token (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDestinationTokenAlternatives'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDestinationTokenAlternativesAsync($destination_token, $idempotency_key = null, string $contentType = self::contentTypes['getDestinationTokenAlternatives'][0])
    {
        return $this->getDestinationTokenAlternativesAsyncWithHttpInfo($destination_token, $idempotency_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDestinationTokenAlternativesAsyncWithHttpInfo
     *
     * Returns list of alternative service to a provided service
     *
     * @param  string $destination_token Destination token (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDestinationTokenAlternatives'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDestinationTokenAlternativesAsyncWithHttpInfo($destination_token, $idempotency_key = null, string $contentType = self::contentTypes['getDestinationTokenAlternatives'][0])
    {
        $returnType = '\MassPayPhpSdk\Model\Service';
        $request = $this->getDestinationTokenAlternativesRequest($destination_token, $idempotency_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDestinationTokenAlternatives'
     *
     * @param  string $destination_token Destination token (required)
     * @param  string $idempotency_key Unique key to prevent duplicate processing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDestinationTokenAlternatives'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDestinationTokenAlternativesRequest($destination_token, $idempotency_key = null, string $contentType = self::contentTypes['getDestinationTokenAlternatives'][0])
    {

        // verify the required parameter 'destination_token' is set
        if ($destination_token === null || (is_array($destination_token) && count($destination_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $destination_token when calling getDestinationTokenAlternatives'
            );
        }



        $resourcePath = '/service/{destination_token}/alternatives';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($idempotency_key !== null) {
            $headerParams['Idempotency-Key'] = ObjectSerializer::toHeaderValue($idempotency_key);
        }

        // path params
        if ($destination_token !== null) {
            $resourcePath = str_replace(
                '{' . 'destination_token' . '}',
                ObjectSerializer::toPathValue($destination_token),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUserAgreement
     *
     * Get User Agreement
     *
     * @param  int $id Id representing user agreement (retrieved from OPTIONS call) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserAgreement'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MassPayPhpSdk\Model\GetUserAgreement200Response
     */
    public function getUserAgreement($id, string $contentType = self::contentTypes['getUserAgreement'][0])
    {
        list($response) = $this->getUserAgreementWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getUserAgreementWithHttpInfo
     *
     * Get User Agreement
     *
     * @param  int $id Id representing user agreement (retrieved from OPTIONS call) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserAgreement'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MassPayPhpSdk\Model\GetUserAgreement200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUserAgreementWithHttpInfo($id, string $contentType = self::contentTypes['getUserAgreement'][0])
    {
        $request = $this->getUserAgreementRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MassPayPhpSdk\Model\GetUserAgreement200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MassPayPhpSdk\Model\GetUserAgreement200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MassPayPhpSdk\Model\GetUserAgreement200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MassPayPhpSdk\Model\GetUserAgreement200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MassPayPhpSdk\Model\GetUserAgreement200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUserAgreementAsync
     *
     * Get User Agreement
     *
     * @param  int $id Id representing user agreement (retrieved from OPTIONS call) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserAgreement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserAgreementAsync($id, string $contentType = self::contentTypes['getUserAgreement'][0])
    {
        return $this->getUserAgreementAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUserAgreementAsyncWithHttpInfo
     *
     * Get User Agreement
     *
     * @param  int $id Id representing user agreement (retrieved from OPTIONS call) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserAgreement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserAgreementAsyncWithHttpInfo($id, string $contentType = self::contentTypes['getUserAgreement'][0])
    {
        $returnType = '\MassPayPhpSdk\Model\GetUserAgreement200Response';
        $request = $this->getUserAgreementRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUserAgreement'
     *
     * @param  int $id Id representing user agreement (retrieved from OPTIONS call) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserAgreement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUserAgreementRequest($id, string $contentType = self::contentTypes['getUserAgreement'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getUserAgreement'
            );
        }


        $resourcePath = '/user-agreements';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUserAgreementsNames
     *
     * Get Available User Agreements
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserAgreementsNames'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MassPayPhpSdk\Model\GetUserAgreementsNames200ResponseInner[]
     */
    public function getUserAgreementsNames(string $contentType = self::contentTypes['getUserAgreementsNames'][0])
    {
        list($response) = $this->getUserAgreementsNamesWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getUserAgreementsNamesWithHttpInfo
     *
     * Get Available User Agreements
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserAgreementsNames'] to see the possible values for this operation
     *
     * @throws \MassPayPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MassPayPhpSdk\Model\GetUserAgreementsNames200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getUserAgreementsNamesWithHttpInfo(string $contentType = self::contentTypes['getUserAgreementsNames'][0])
    {
        $request = $this->getUserAgreementsNamesRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MassPayPhpSdk\Model\GetUserAgreementsNames200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MassPayPhpSdk\Model\GetUserAgreementsNames200ResponseInner[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MassPayPhpSdk\Model\GetUserAgreementsNames200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MassPayPhpSdk\Model\GetUserAgreementsNames200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MassPayPhpSdk\Model\GetUserAgreementsNames200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUserAgreementsNamesAsync
     *
     * Get Available User Agreements
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserAgreementsNames'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserAgreementsNamesAsync(string $contentType = self::contentTypes['getUserAgreementsNames'][0])
    {
        return $this->getUserAgreementsNamesAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUserAgreementsNamesAsyncWithHttpInfo
     *
     * Get Available User Agreements
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserAgreementsNames'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserAgreementsNamesAsyncWithHttpInfo(string $contentType = self::contentTypes['getUserAgreementsNames'][0])
    {
        $returnType = '\MassPayPhpSdk\Model\GetUserAgreementsNames200ResponseInner[]';
        $request = $this->getUserAgreementsNamesRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUserAgreementsNames'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserAgreementsNames'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUserAgreementsNamesRequest(string $contentType = self::contentTypes['getUserAgreementsNames'][0])
    {


        $resourcePath = '/user-agreements';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'OPTIONS',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
