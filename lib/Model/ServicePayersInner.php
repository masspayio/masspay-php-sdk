<?php
/**
 * ServicePayersInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MassPayPhpSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MassPay API
 *
 * MassPay API
 *
 * The version of the OpenAPI document: 0.1.4
 * Contact: info@masspay.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MassPayPhpSdk\Model;

use \ArrayAccess;
use \MassPayPhpSdk\ObjectSerializer;

/**
 * ServicePayersInner Class Doc Comment
 *
 * @category Class
 * @package  MassPayPhpSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ServicePayersInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Service_payers_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'destination_token' => 'string',
        'payer_logo' => 'string',
        'payer_name' => 'string',
        'exchange_rate' => '\MassPayPhpSdk\Model\ServicePayersInnerExchangeRateInner[]',
        'fee' => 'float',
        'max_limit' => 'float',
        'min_limit' => 'float',
        'source_amount' => 'float',
        'number_of_locations' => 'int',
        'estimated_availability' => '\DateTime',
        'additional_description' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'destination_token' => 'uuid',
        'payer_logo' => 'byte',
        'payer_name' => null,
        'exchange_rate' => null,
        'fee' => 'double',
        'max_limit' => 'double',
        'min_limit' => 'double',
        'source_amount' => 'double',
        'number_of_locations' => 'int32',
        'estimated_availability' => 'date-time',
        'additional_description' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'destination_token' => false,
		'payer_logo' => false,
		'payer_name' => false,
		'exchange_rate' => false,
		'fee' => false,
		'max_limit' => false,
		'min_limit' => false,
		'source_amount' => false,
		'number_of_locations' => false,
		'estimated_availability' => false,
		'additional_description' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'destination_token' => 'destination_token',
        'payer_logo' => 'payer_logo',
        'payer_name' => 'payer_name',
        'exchange_rate' => 'exchange_rate',
        'fee' => 'fee',
        'max_limit' => 'max_limit',
        'min_limit' => 'min_limit',
        'source_amount' => 'source_amount',
        'number_of_locations' => 'number_of_locations',
        'estimated_availability' => 'estimated_availability',
        'additional_description' => 'additional_description'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'destination_token' => 'setDestinationToken',
        'payer_logo' => 'setPayerLogo',
        'payer_name' => 'setPayerName',
        'exchange_rate' => 'setExchangeRate',
        'fee' => 'setFee',
        'max_limit' => 'setMaxLimit',
        'min_limit' => 'setMinLimit',
        'source_amount' => 'setSourceAmount',
        'number_of_locations' => 'setNumberOfLocations',
        'estimated_availability' => 'setEstimatedAvailability',
        'additional_description' => 'setAdditionalDescription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'destination_token' => 'getDestinationToken',
        'payer_logo' => 'getPayerLogo',
        'payer_name' => 'getPayerName',
        'exchange_rate' => 'getExchangeRate',
        'fee' => 'getFee',
        'max_limit' => 'getMaxLimit',
        'min_limit' => 'getMinLimit',
        'source_amount' => 'getSourceAmount',
        'number_of_locations' => 'getNumberOfLocations',
        'estimated_availability' => 'getEstimatedAvailability',
        'additional_description' => 'getAdditionalDescription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('destination_token', $data ?? [], null);
        $this->setIfExists('payer_logo', $data ?? [], null);
        $this->setIfExists('payer_name', $data ?? [], null);
        $this->setIfExists('exchange_rate', $data ?? [], null);
        $this->setIfExists('fee', $data ?? [], null);
        $this->setIfExists('max_limit', $data ?? [], null);
        $this->setIfExists('min_limit', $data ?? [], null);
        $this->setIfExists('source_amount', $data ?? [], null);
        $this->setIfExists('number_of_locations', $data ?? [], 0);
        $this->setIfExists('estimated_availability', $data ?? [], null);
        $this->setIfExists('additional_description', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['destination_token'] === null) {
            $invalidProperties[] = "'destination_token' can't be null";
        }
        if ($this->container['payer_logo'] === null) {
            $invalidProperties[] = "'payer_logo' can't be null";
        }
        if ($this->container['payer_name'] === null) {
            $invalidProperties[] = "'payer_name' can't be null";
        }
        if ($this->container['exchange_rate'] === null) {
            $invalidProperties[] = "'exchange_rate' can't be null";
        }
        if ($this->container['fee'] === null) {
            $invalidProperties[] = "'fee' can't be null";
        }
        if ($this->container['max_limit'] === null) {
            $invalidProperties[] = "'max_limit' can't be null";
        }
        if ($this->container['min_limit'] === null) {
            $invalidProperties[] = "'min_limit' can't be null";
        }
        if (!is_null($this->container['number_of_locations']) && ($this->container['number_of_locations'] < 0)) {
            $invalidProperties[] = "invalid value for 'number_of_locations', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets destination_token
     *
     * @return string
     */
    public function getDestinationToken()
    {
        return $this->container['destination_token'];
    }

    /**
     * Sets destination_token
     *
     * @param string $destination_token Token that represents the payout destination. 36 characters long
     *
     * @return self
     */
    public function setDestinationToken($destination_token)
    {
        if (is_null($destination_token)) {
            throw new \InvalidArgumentException('non-nullable destination_token cannot be null');
        }
        $this->container['destination_token'] = $destination_token;

        return $this;
    }

    /**
     * Gets payer_logo
     *
     * @return string
     */
    public function getPayerLogo()
    {
        return $this->container['payer_logo'];
    }

    /**
     * Sets payer_logo
     *
     * @param string $payer_logo base64 representation of the payer logo
     *
     * @return self
     */
    public function setPayerLogo($payer_logo)
    {
        if (is_null($payer_logo)) {
            throw new \InvalidArgumentException('non-nullable payer_logo cannot be null');
        }
        $this->container['payer_logo'] = $payer_logo;

        return $this;
    }

    /**
     * Gets payer_name
     *
     * @return string
     */
    public function getPayerName()
    {
        return $this->container['payer_name'];
    }

    /**
     * Sets payer_name
     *
     * @param string $payer_name Name of payer
     *
     * @return self
     */
    public function setPayerName($payer_name)
    {
        if (is_null($payer_name)) {
            throw new \InvalidArgumentException('non-nullable payer_name cannot be null');
        }
        $this->container['payer_name'] = $payer_name;

        return $this;
    }

    /**
     * Gets exchange_rate
     *
     * @return \MassPayPhpSdk\Model\ServicePayersInnerExchangeRateInner[]
     */
    public function getExchangeRate()
    {
        return $this->container['exchange_rate'];
    }

    /**
     * Sets exchange_rate
     *
     * @param \MassPayPhpSdk\Model\ServicePayersInnerExchangeRateInner[] $exchange_rate Lists all available currencies and their estimated rates
     *
     * @return self
     */
    public function setExchangeRate($exchange_rate)
    {
        if (is_null($exchange_rate)) {
            throw new \InvalidArgumentException('non-nullable exchange_rate cannot be null');
        }
        $this->container['exchange_rate'] = $exchange_rate;

        return $this;
    }

    /**
     * Gets fee
     *
     * @return float
     */
    public function getFee()
    {
        return $this->container['fee'];
    }

    /**
     * Sets fee
     *
     * @param float $fee Service fee
     *
     * @return self
     */
    public function setFee($fee)
    {
        if (is_null($fee)) {
            throw new \InvalidArgumentException('non-nullable fee cannot be null');
        }
        $this->container['fee'] = $fee;

        return $this;
    }

    /**
     * Gets max_limit
     *
     * @return float
     */
    public function getMaxLimit()
    {
        return $this->container['max_limit'];
    }

    /**
     * Sets max_limit
     *
     * @param float $max_limit The maximum amount (inclusive) the user can send with this service. 0 if no upper limit
     *
     * @return self
     */
    public function setMaxLimit($max_limit)
    {
        if (is_null($max_limit)) {
            throw new \InvalidArgumentException('non-nullable max_limit cannot be null');
        }
        $this->container['max_limit'] = $max_limit;

        return $this;
    }

    /**
     * Gets min_limit
     *
     * @return float
     */
    public function getMinLimit()
    {
        return $this->container['min_limit'];
    }

    /**
     * Sets min_limit
     *
     * @param float $min_limit The minimum amount (inclusive) the user can send with this service. 0 if no lower limit
     *
     * @return self
     */
    public function setMinLimit($min_limit)
    {
        if (is_null($min_limit)) {
            throw new \InvalidArgumentException('non-nullable min_limit cannot be null');
        }
        $this->container['min_limit'] = $min_limit;

        return $this;
    }

    /**
     * Gets source_amount
     *
     * @return float|null
     */
    public function getSourceAmount()
    {
        return $this->container['source_amount'];
    }

    /**
     * Sets source_amount
     *
     * @param float|null $source_amount Optional return field. Will only show if `limit` parameter is provided
     *
     * @return self
     */
    public function setSourceAmount($source_amount)
    {
        if (is_null($source_amount)) {
            throw new \InvalidArgumentException('non-nullable source_amount cannot be null');
        }
        $this->container['source_amount'] = $source_amount;

        return $this;
    }

    /**
     * Gets number_of_locations
     *
     * @return int|null
     */
    public function getNumberOfLocations()
    {
        return $this->container['number_of_locations'];
    }

    /**
     * Sets number_of_locations
     *
     * @param int|null $number_of_locations Total number of locations. Mostly relevant for cash pickup services. 0 if unknown or irrelevant
     *
     * @return self
     */
    public function setNumberOfLocations($number_of_locations)
    {
        if (is_null($number_of_locations)) {
            throw new \InvalidArgumentException('non-nullable number_of_locations cannot be null');
        }

        if (($number_of_locations < 0)) {
            throw new \InvalidArgumentException('invalid value for $number_of_locations when calling ServicePayersInner., must be bigger than or equal to 0.');
        }

        $this->container['number_of_locations'] = $number_of_locations;

        return $this;
    }

    /**
     * Gets estimated_availability
     *
     * @return \DateTime|null
     */
    public function getEstimatedAvailability()
    {
        return $this->container['estimated_availability'];
    }

    /**
     * Sets estimated_availability
     *
     * @param \DateTime|null $estimated_availability Estimated availability of funds. When funds would be available to pickup/deposited
     *
     * @return self
     */
    public function setEstimatedAvailability($estimated_availability)
    {
        if (is_null($estimated_availability)) {
            throw new \InvalidArgumentException('non-nullable estimated_availability cannot be null');
        }
        $this->container['estimated_availability'] = $estimated_availability;

        return $this;
    }

    /**
     * Gets additional_description
     *
     * @return string|null
     */
    public function getAdditionalDescription()
    {
        return $this->container['additional_description'];
    }

    /**
     * Sets additional_description
     *
     * @param string|null $additional_description When available, additional description that explains the service offered or requirements for funds delivery.
     *
     * @return self
     */
    public function setAdditionalDescription($additional_description)
    {
        if (is_null($additional_description)) {
            throw new \InvalidArgumentException('non-nullable additional_description cannot be null');
        }
        $this->container['additional_description'] = $additional_description;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


