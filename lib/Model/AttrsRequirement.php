<?php
/**
 * AttrsRequirement
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MassPayPhpSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MassPay API
 *
 * MassPay API
 *
 * The version of the OpenAPI document: 0.1.4
 * Contact: info@masspay.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MassPayPhpSdk\Model;

use \ArrayAccess;
use \MassPayPhpSdk\ObjectSerializer;

/**
 * AttrsRequirement Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  MassPayPhpSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AttrsRequirement implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AttrsRequirement';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'token' => 'string',
        'attr_set_token' => 'string',
        'label' => 'string',
        'validation' => 'string',
        'is_optional' => 'bool',
        'value' => 'string',
        'expected_value' => 'string',
        'type' => 'string',
        'input_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'token' => null,
        'attr_set_token' => null,
        'label' => null,
        'validation' => null,
        'is_optional' => null,
        'value' => null,
        'expected_value' => null,
        'type' => null,
        'input_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'token' => false,
		'attr_set_token' => false,
		'label' => false,
		'validation' => false,
		'is_optional' => false,
		'value' => false,
		'expected_value' => false,
		'type' => false,
		'input_type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'token' => 'token',
        'attr_set_token' => 'attr_set_token',
        'label' => 'label',
        'validation' => 'validation',
        'is_optional' => 'is_optional',
        'value' => 'value',
        'expected_value' => 'expected_value',
        'type' => 'type',
        'input_type' => 'input_type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'token' => 'setToken',
        'attr_set_token' => 'setAttrSetToken',
        'label' => 'setLabel',
        'validation' => 'setValidation',
        'is_optional' => 'setIsOptional',
        'value' => 'setValue',
        'expected_value' => 'setExpectedValue',
        'type' => 'setType',
        'input_type' => 'setInputType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'token' => 'getToken',
        'attr_set_token' => 'getAttrSetToken',
        'label' => 'getLabel',
        'validation' => 'getValidation',
        'is_optional' => 'getIsOptional',
        'value' => 'getValue',
        'expected_value' => 'getExpectedValue',
        'type' => 'getType',
        'input_type' => 'getInputType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_CARD_NUMBER = 'CardNumber';
    public const TYPE_BANK_ACCOUNT_TYPE = 'BankAccountType';
    public const TYPE_BANK_ACCOUNT_NUMBER = 'BankAccountNumber';
    public const TYPE_BANK_ACCOUNT_BRANCH_NUMBER = 'BankAccountBranchNumber';
    public const TYPE_BANK_NAME = 'BankName';
    public const TYPE_PHONE_NUMBER = 'PhoneNumber';
    public const TYPE_GENDER = 'Gender';
    public const TYPE_IDENTIFICATION_NUMBER = 'IdentificationNumber';
    public const TYPE_BILL_REFERENCE_NUMBER = 'BillReferenceNumber';
    public const TYPE_BANK_ROUTING_NUMBER = 'BankRoutingNumber';
    public const TYPE_BANK_ACCOUNT_NAME = 'BankAccountName';
    public const TYPE_MAIDEN_NAME = 'MaidenName';
    public const TYPE_SOCIAL_SECURITY = 'SocialSecurity';
    public const TYPE_EMPLOYMENT_NAME = 'EmploymentName';
    public const TYPE_EMPLOYMENT_ADDRESS = 'EmploymentAddress';
    public const TYPE_EMPLOYMENT_PHONE = 'EmploymentPhone';
    public const TYPE_EMPLOYMENT_OCCUPATION = 'EmploymentOccupation';
    public const TYPE_EMPLOYMENT_SUPERVISOR = 'EmploymentSupervisor';
    public const TYPE_REMITTANCE_REASON = 'RemittanceReason';
    public const TYPE_RELATIONSHIP = 'Relationship';
    public const TYPE_SECOND_LAST_NAME = 'SecondLastName';
    public const TYPE_SWIFT = 'SWIFT';
    public const TYPE_BIRTH_COUNTRY = 'BirthCountry';
    public const TYPE_SOURCE_OF_FUNDS = 'SourceOfFunds';
    public const TYPE_DATE_OF_BIRTH = 'DateOfBirth';
    public const TYPE_CARD_EXPIRATION = 'CardExpiration';
    public const TYPE_CARD_ZIP = 'CardZip';
    public const TYPE_IDENTIFICATION_TYPE = 'IdentificationType';
    public const TYPE_BANK_CITY = 'BankCity';
    public const TYPE_BANK_STATE = 'BankState';
    public const TYPE_ID_SELFIE_COLLECTION = 'IDSelfieCollection';
    public const INPUT_TYPE_TEXT = 'text';
    public const INPUT_TYPE_OPTIONS = 'options';
    public const INPUT_TYPE_DATE = 'date';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_CARD_NUMBER,
            self::TYPE_BANK_ACCOUNT_TYPE,
            self::TYPE_BANK_ACCOUNT_NUMBER,
            self::TYPE_BANK_ACCOUNT_BRANCH_NUMBER,
            self::TYPE_BANK_NAME,
            self::TYPE_PHONE_NUMBER,
            self::TYPE_GENDER,
            self::TYPE_IDENTIFICATION_NUMBER,
            self::TYPE_BILL_REFERENCE_NUMBER,
            self::TYPE_BANK_ROUTING_NUMBER,
            self::TYPE_BANK_ACCOUNT_NAME,
            self::TYPE_MAIDEN_NAME,
            self::TYPE_SOCIAL_SECURITY,
            self::TYPE_EMPLOYMENT_NAME,
            self::TYPE_EMPLOYMENT_ADDRESS,
            self::TYPE_EMPLOYMENT_PHONE,
            self::TYPE_EMPLOYMENT_OCCUPATION,
            self::TYPE_EMPLOYMENT_SUPERVISOR,
            self::TYPE_REMITTANCE_REASON,
            self::TYPE_RELATIONSHIP,
            self::TYPE_SECOND_LAST_NAME,
            self::TYPE_SWIFT,
            self::TYPE_BIRTH_COUNTRY,
            self::TYPE_SOURCE_OF_FUNDS,
            self::TYPE_DATE_OF_BIRTH,
            self::TYPE_CARD_EXPIRATION,
            self::TYPE_CARD_ZIP,
            self::TYPE_IDENTIFICATION_TYPE,
            self::TYPE_BANK_CITY,
            self::TYPE_BANK_STATE,
            self::TYPE_ID_SELFIE_COLLECTION,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInputTypeAllowableValues()
    {
        return [
            self::INPUT_TYPE_TEXT,
            self::INPUT_TYPE_OPTIONS,
            self::INPUT_TYPE_DATE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('token', $data ?? [], null);
        $this->setIfExists('attr_set_token', $data ?? [], null);
        $this->setIfExists('label', $data ?? [], null);
        $this->setIfExists('validation', $data ?? [], null);
        $this->setIfExists('is_optional', $data ?? [], null);
        $this->setIfExists('value', $data ?? [], null);
        $this->setIfExists('expected_value', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('input_type', $data ?? [], 'text');
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['token'] === null) {
            $invalidProperties[] = "'token' can't be null";
        }
        if ($this->container['value'] === null) {
            $invalidProperties[] = "'value' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['input_type'] === null) {
            $invalidProperties[] = "'input_type' can't be null";
        }
        $allowedValues = $this->getInputTypeAllowableValues();
        if (!is_null($this->container['input_type']) && !in_array($this->container['input_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'input_type', must be one of '%s'",
                $this->container['input_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets token
     *
     * @return string
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string $token The token that represents the attribute.
     *
     * @return self
     */
    public function setToken($token)
    {
        if (is_null($token)) {
            throw new \InvalidArgumentException('non-nullable token cannot be null');
        }
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets attr_set_token
     *
     * @return string|null
     */
    public function getAttrSetToken()
    {
        return $this->container['attr_set_token'];
    }

    /**
     * Sets attr_set_token
     *
     * @param string|null $attr_set_token The token that represents the stored attributes for this payer. You would use this token in attr_set_token of `initiatePayout` if you have to specify an account number when paying a transaction out.
     *
     * @return self
     */
    public function setAttrSetToken($attr_set_token)
    {
        if (is_null($attr_set_token)) {
            throw new \InvalidArgumentException('non-nullable attr_set_token cannot be null');
        }
        $this->container['attr_set_token'] = $attr_set_token;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string|null
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string|null $label The label that describes that required attribute
     *
     * @return self
     */
    public function setLabel($label)
    {
        if (is_null($label)) {
            throw new \InvalidArgumentException('non-nullable label cannot be null');
        }
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets validation
     *
     * @return string|null
     */
    public function getValidation()
    {
        return $this->container['validation'];
    }

    /**
     * Sets validation
     *
     * @param string|null $validation RegEx that validates that input
     *
     * @return self
     */
    public function setValidation($validation)
    {
        if (is_null($validation)) {
            throw new \InvalidArgumentException('non-nullable validation cannot be null');
        }
        $this->container['validation'] = $validation;

        return $this;
    }

    /**
     * Gets is_optional
     *
     * @return bool|null
     */
    public function getIsOptional()
    {
        return $this->container['is_optional'];
    }

    /**
     * Sets is_optional
     *
     * @param bool|null $is_optional Flag to indicate whether this field is required or not
     *
     * @return self
     */
    public function setIsOptional($is_optional)
    {
        if (is_null($is_optional)) {
            throw new \InvalidArgumentException('non-nullable is_optional cannot be null');
        }
        $this->container['is_optional'] = $is_optional;

        return $this;
    }

    /**
     * Gets value
     *
     * @return string
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param string $value The existing value that is stored. 'Null' if no existing value is stored.
     *
     * @return self
     */
    public function setValue($value)
    {
        if (is_null($value)) {
            throw new \InvalidArgumentException('non-nullable value cannot be null');
        }
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets expected_value
     *
     * @return string|null
     */
    public function getExpectedValue()
    {
        return $this->container['expected_value'];
    }

    /**
     * Sets expected_value
     *
     * @param string|null $expected_value Written explanation of the value that the regex validation requires
     *
     * @return self
     */
    public function setExpectedValue($expected_value)
    {
        if (is_null($expected_value)) {
            throw new \InvalidArgumentException('non-nullable expected_value cannot be null');
        }
        $this->container['expected_value'] = $expected_value;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type The type of attribute
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets input_type
     *
     * @return string
     */
    public function getInputType()
    {
        return $this->container['input_type'];
    }

    /**
     * Sets input_type
     *
     * @param string $input_type The type of input field that is suggested for this this attribute
     *
     * @return self
     */
    public function setInputType($input_type)
    {
        if (is_null($input_type)) {
            throw new \InvalidArgumentException('non-nullable input_type cannot be null');
        }
        $allowedValues = $this->getInputTypeAllowableValues();
        if (!in_array($input_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'input_type', must be one of '%s'",
                    $input_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['input_type'] = $input_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


