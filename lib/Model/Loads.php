<?php
/**
 * Loads
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MassPayPhpSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MassPay API
 *
 * MassPay API
 *
 * The version of the OpenAPI document: 0.1.4
 * Contact: info@masspay.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MassPayPhpSdk\Model;

use \ArrayAccess;
use \MassPayPhpSdk\ObjectSerializer;

/**
 * Loads Class Doc Comment
 *
 * @category Class
 * @package  MassPayPhpSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Loads implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Loads';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'load_token' => 'string',
        'time_of_load' => 'string',
        'client_load_id' => 'string',
        'source_token' => 'string',
        'wallet_token' => 'string',
        'amount' => 'float',
        'source_currency_code' => 'string',
        'notes' => 'string',
        'status' => 'string',
        'metadata' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'load_token' => null,
        'time_of_load' => 'YYYY-MM-DDThh:mm:ss',
        'client_load_id' => null,
        'source_token' => 'uuid',
        'wallet_token' => 'uuid',
        'amount' => '',
        'source_currency_code' => null,
        'notes' => null,
        'status' => null,
        'metadata' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'load_token' => false,
		'time_of_load' => false,
		'client_load_id' => false,
		'source_token' => false,
		'wallet_token' => false,
		'amount' => false,
		'source_currency_code' => false,
		'notes' => false,
		'status' => false,
		'metadata' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'load_token' => 'load_token',
        'time_of_load' => 'time_of_load',
        'client_load_id' => 'client_load_id',
        'source_token' => 'source_token',
        'wallet_token' => 'wallet_token',
        'amount' => 'amount',
        'source_currency_code' => 'source_currency_code',
        'notes' => 'notes',
        'status' => 'status',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'load_token' => 'setLoadToken',
        'time_of_load' => 'setTimeOfLoad',
        'client_load_id' => 'setClientLoadId',
        'source_token' => 'setSourceToken',
        'wallet_token' => 'setWalletToken',
        'amount' => 'setAmount',
        'source_currency_code' => 'setSourceCurrencyCode',
        'notes' => 'setNotes',
        'status' => 'setStatus',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'load_token' => 'getLoadToken',
        'time_of_load' => 'getTimeOfLoad',
        'client_load_id' => 'getClientLoadId',
        'source_token' => 'getSourceToken',
        'wallet_token' => 'getWalletToken',
        'amount' => 'getAmount',
        'source_currency_code' => 'getSourceCurrencyCode',
        'notes' => 'getNotes',
        'status' => 'getStatus',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_COMPLETED = 'COMPLETED';
    public const STATUS_CANCELLED = 'CANCELLED';
    public const STATUS_SCHEDULED = 'SCHEDULED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_COMPLETED,
            self::STATUS_CANCELLED,
            self::STATUS_SCHEDULED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('load_token', $data ?? [], null);
        $this->setIfExists('time_of_load', $data ?? [], null);
        $this->setIfExists('client_load_id', $data ?? [], null);
        $this->setIfExists('source_token', $data ?? [], null);
        $this->setIfExists('wallet_token', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('source_currency_code', $data ?? [], null);
        $this->setIfExists('notes', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['load_token'] === null) {
            $invalidProperties[] = "'load_token' can't be null";
        }
        if ($this->container['time_of_load'] === null) {
            $invalidProperties[] = "'time_of_load' can't be null";
        }
        if ($this->container['client_load_id'] === null) {
            $invalidProperties[] = "'client_load_id' can't be null";
        }
        if ($this->container['source_token'] === null) {
            $invalidProperties[] = "'source_token' can't be null";
        }
        if ($this->container['wallet_token'] === null) {
            $invalidProperties[] = "'wallet_token' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['source_currency_code'] === null) {
            $invalidProperties[] = "'source_currency_code' can't be null";
        }
        if ($this->container['notes'] === null) {
            $invalidProperties[] = "'notes' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets load_token
     *
     * @return string
     */
    public function getLoadToken()
    {
        return $this->container['load_token'];
    }

    /**
     * Sets load_token
     *
     * @param string $load_token Token representing the load token
     *
     * @return self
     */
    public function setLoadToken($load_token)
    {
        if (is_null($load_token)) {
            throw new \InvalidArgumentException('non-nullable load_token cannot be null');
        }
        $this->container['load_token'] = $load_token;

        return $this;
    }

    /**
     * Gets time_of_load
     *
     * @return string
     */
    public function getTimeOfLoad()
    {
        return $this->container['time_of_load'];
    }

    /**
     * Sets time_of_load
     *
     * @param string $time_of_load The timestamp the load was processed. If not processed yet, a future date will be returned. Using UTC timestamp.[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
     *
     * @return self
     */
    public function setTimeOfLoad($time_of_load)
    {
        if (is_null($time_of_load)) {
            throw new \InvalidArgumentException('non-nullable time_of_load cannot be null');
        }
        $this->container['time_of_load'] = $time_of_load;

        return $this;
    }

    /**
     * Gets client_load_id
     *
     * @return string
     */
    public function getClientLoadId()
    {
        return $this->container['client_load_id'];
    }

    /**
     * Sets client_load_id
     *
     * @param string $client_load_id A client defined load identifier. This is the unique ID assigned to the load on your system. Max 50 characters.
     *
     * @return self
     */
    public function setClientLoadId($client_load_id)
    {
        if (is_null($client_load_id)) {
            throw new \InvalidArgumentException('non-nullable client_load_id cannot be null');
        }
        $this->container['client_load_id'] = $client_load_id;

        return $this;
    }

    /**
     * Gets source_token
     *
     * @return string
     */
    public function getSourceToken()
    {
        return $this->container['source_token'];
    }

    /**
     * Sets source_token
     *
     * @param string $source_token Token that represents the funding source i.e. bank account, wallet. 36 characters long
     *
     * @return self
     */
    public function setSourceToken($source_token)
    {
        if (is_null($source_token)) {
            throw new \InvalidArgumentException('non-nullable source_token cannot be null');
        }
        $this->container['source_token'] = $source_token;

        return $this;
    }

    /**
     * Gets wallet_token
     *
     * @return string
     */
    public function getWalletToken()
    {
        return $this->container['wallet_token'];
    }

    /**
     * Sets wallet_token
     *
     * @param string $wallet_token Token that represents the wallet that received the funds. 36 characters long
     *
     * @return self
     */
    public function setWalletToken($wallet_token)
    {
        if (is_null($wallet_token)) {
            throw new \InvalidArgumentException('non-nullable wallet_token cannot be null');
        }
        $this->container['wallet_token'] = $wallet_token;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount The amount to credit the user's wallet in source currency
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets source_currency_code
     *
     * @return string
     */
    public function getSourceCurrencyCode()
    {
        return $this->container['source_currency_code'];
    }

    /**
     * Sets source_currency_code
     *
     * @param string $source_currency_code The currency originating balance is stored in. Using [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) format. In most cases this value will be USD, and therefore the defaut value if none is provided
     *
     * @return self
     */
    public function setSourceCurrencyCode($source_currency_code)
    {
        if (is_null($source_currency_code)) {
            throw new \InvalidArgumentException('non-nullable source_currency_code cannot be null');
        }
        $this->container['source_currency_code'] = $source_currency_code;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes A description for the load. Will be visible to the user receiving the load
     *
     * @return self
     */
    public function setNotes($notes)
    {
        if (is_null($notes)) {
            throw new \InvalidArgumentException('non-nullable notes cannot be null');
        }
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Status of the load
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object|null $metadata Optional JSON object with attributes that can later be searched to locate this load. Do not include PII as this object is not encrypted.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


