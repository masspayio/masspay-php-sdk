<?php
/**
 * TxnHistoryResp
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MassPayPhpSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MassPay API
 *
 * MassPay API
 *
 * The version of the OpenAPI document: 0.1.4
 * Contact: info@masspay.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MassPayPhpSdk\Model;

use \ArrayAccess;
use \MassPayPhpSdk\ObjectSerializer;

/**
 * TxnHistoryResp Class Doc Comment
 *
 * @category Class
 * @description Record that represents a transaction
 * @package  MassPayPhpSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TxnHistoryResp implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TxnHistoryResp';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'token' => 'string',
        'type' => 'string',
        'time_of_txn' => '\DateTime',
        'source_amount' => 'float',
        'source_currency_code' => 'string',
        'destination_amount' => 'float',
        'destination_currency_code' => 'string',
        'fee' => 'float',
        'status' => 'string',
        'notes' => 'string',
        'payer_name' => 'string',
        'pickup_code' => 'string',
        'source_token' => 'string',
        'destination_token' => 'string',
        'delivery_type' => 'string',
        'client_transfer_id' => 'string',
        'status_reason' => 'string',
        'client_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'token' => 'uuid',
        'type' => null,
        'time_of_txn' => 'date-time',
        'source_amount' => 'float',
        'source_currency_code' => null,
        'destination_amount' => 'float',
        'destination_currency_code' => null,
        'fee' => 'float',
        'status' => null,
        'notes' => null,
        'payer_name' => null,
        'pickup_code' => null,
        'source_token' => 'uuid',
        'destination_token' => 'uuid',
        'delivery_type' => null,
        'client_transfer_id' => null,
        'status_reason' => null,
        'client_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'token' => false,
		'type' => false,
		'time_of_txn' => false,
		'source_amount' => false,
		'source_currency_code' => false,
		'destination_amount' => false,
		'destination_currency_code' => false,
		'fee' => false,
		'status' => false,
		'notes' => false,
		'payer_name' => false,
		'pickup_code' => false,
		'source_token' => false,
		'destination_token' => false,
		'delivery_type' => false,
		'client_transfer_id' => false,
		'status_reason' => false,
		'client_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'token' => 'token',
        'type' => 'type',
        'time_of_txn' => 'time_of_txn',
        'source_amount' => 'source_amount',
        'source_currency_code' => 'source_currency_code',
        'destination_amount' => 'destination_amount',
        'destination_currency_code' => 'destination_currency_code',
        'fee' => 'fee',
        'status' => 'status',
        'notes' => 'notes',
        'payer_name' => 'payer_name',
        'pickup_code' => 'pickup_code',
        'source_token' => 'source_token',
        'destination_token' => 'destination_token',
        'delivery_type' => 'delivery_type',
        'client_transfer_id' => 'client_transfer_id',
        'status_reason' => 'status_reason',
        'client_id' => 'client_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'token' => 'setToken',
        'type' => 'setType',
        'time_of_txn' => 'setTimeOfTxn',
        'source_amount' => 'setSourceAmount',
        'source_currency_code' => 'setSourceCurrencyCode',
        'destination_amount' => 'setDestinationAmount',
        'destination_currency_code' => 'setDestinationCurrencyCode',
        'fee' => 'setFee',
        'status' => 'setStatus',
        'notes' => 'setNotes',
        'payer_name' => 'setPayerName',
        'pickup_code' => 'setPickupCode',
        'source_token' => 'setSourceToken',
        'destination_token' => 'setDestinationToken',
        'delivery_type' => 'setDeliveryType',
        'client_transfer_id' => 'setClientTransferId',
        'status_reason' => 'setStatusReason',
        'client_id' => 'setClientId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'token' => 'getToken',
        'type' => 'getType',
        'time_of_txn' => 'getTimeOfTxn',
        'source_amount' => 'getSourceAmount',
        'source_currency_code' => 'getSourceCurrencyCode',
        'destination_amount' => 'getDestinationAmount',
        'destination_currency_code' => 'getDestinationCurrencyCode',
        'fee' => 'getFee',
        'status' => 'getStatus',
        'notes' => 'getNotes',
        'payer_name' => 'getPayerName',
        'pickup_code' => 'getPickupCode',
        'source_token' => 'getSourceToken',
        'destination_token' => 'getDestinationToken',
        'delivery_type' => 'getDeliveryType',
        'client_transfer_id' => 'getClientTransferId',
        'status_reason' => 'getStatusReason',
        'client_id' => 'getClientId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_LOAD = 'load';
    public const TYPE_PAYOUT = 'payout';
    public const TYPE_SPEND_BACK = 'spend back';
    public const TYPE_INFO = 'info';
    public const STATUS_PENDING = 'PENDING';
    public const STATUS_PROCESSING = 'PROCESSING';
    public const STATUS_COMPLETED = 'COMPLETED';
    public const STATUS_CANCELLED = 'CANCELLED';
    public const STATUS_SCHEDULED = 'SCHEDULED';
    public const STATUS_READY_FOR_PICKUP = 'READY_FOR_PICKUP';
    public const STATUS_HOLD = 'HOLD';
    public const STATUS_ERROR = 'ERROR';
    public const DELIVERY_TYPE_CASH_PICKUP = 'CASH_PICKUP';
    public const DELIVERY_TYPE_BANK_DEPOSIT = 'BANK_DEPOSIT';
    public const DELIVERY_TYPE_HOME_DELIVERY = 'HOME_DELIVERY';
    public const DELIVERY_TYPE_MOBILE_WALLET = 'MOBILE_WALLET';
    public const DELIVERY_TYPE_MASSPAY_CARD = 'MASSPAY_CARD';
    public const DELIVERY_TYPE_PAPER_CHECK = 'PAPER_CHECK';
    public const DELIVERY_TYPE_BILL = 'BILL';
    public const DELIVERY_TYPE_CRYPTOCURRENCY = 'CRYPTOCURRENCY';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_LOAD,
            self::TYPE_PAYOUT,
            self::TYPE_SPEND_BACK,
            self::TYPE_INFO,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_PENDING,
            self::STATUS_PROCESSING,
            self::STATUS_COMPLETED,
            self::STATUS_CANCELLED,
            self::STATUS_SCHEDULED,
            self::STATUS_READY_FOR_PICKUP,
            self::STATUS_HOLD,
            self::STATUS_ERROR,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeliveryTypeAllowableValues()
    {
        return [
            self::DELIVERY_TYPE_CASH_PICKUP,
            self::DELIVERY_TYPE_BANK_DEPOSIT,
            self::DELIVERY_TYPE_HOME_DELIVERY,
            self::DELIVERY_TYPE_MOBILE_WALLET,
            self::DELIVERY_TYPE_MASSPAY_CARD,
            self::DELIVERY_TYPE_PAPER_CHECK,
            self::DELIVERY_TYPE_BILL,
            self::DELIVERY_TYPE_CRYPTOCURRENCY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('token', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('time_of_txn', $data ?? [], null);
        $this->setIfExists('source_amount', $data ?? [], null);
        $this->setIfExists('source_currency_code', $data ?? [], 'USD');
        $this->setIfExists('destination_amount', $data ?? [], null);
        $this->setIfExists('destination_currency_code', $data ?? [], null);
        $this->setIfExists('fee', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('notes', $data ?? [], null);
        $this->setIfExists('payer_name', $data ?? [], null);
        $this->setIfExists('pickup_code', $data ?? [], null);
        $this->setIfExists('source_token', $data ?? [], null);
        $this->setIfExists('destination_token', $data ?? [], null);
        $this->setIfExists('delivery_type', $data ?? [], null);
        $this->setIfExists('client_transfer_id', $data ?? [], null);
        $this->setIfExists('status_reason', $data ?? [], null);
        $this->setIfExists('client_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['token'] === null) {
            $invalidProperties[] = "'token' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['time_of_txn'] === null) {
            $invalidProperties[] = "'time_of_txn' can't be null";
        }
        if ($this->container['source_amount'] === null) {
            $invalidProperties[] = "'source_amount' can't be null";
        }
        if ($this->container['source_currency_code'] === null) {
            $invalidProperties[] = "'source_currency_code' can't be null";
        }
        if ((mb_strlen($this->container['source_currency_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'source_currency_code', the character length must be smaller than or equal to 3.";
        }

        if ((mb_strlen($this->container['source_currency_code']) < 3)) {
            $invalidProperties[] = "invalid value for 'source_currency_code', the character length must be bigger than or equal to 3.";
        }

        if ($this->container['destination_amount'] === null) {
            $invalidProperties[] = "'destination_amount' can't be null";
        }
        if ($this->container['destination_currency_code'] === null) {
            $invalidProperties[] = "'destination_currency_code' can't be null";
        }
        if ((mb_strlen($this->container['destination_currency_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'destination_currency_code', the character length must be smaller than or equal to 3.";
        }

        if ((mb_strlen($this->container['destination_currency_code']) < 3)) {
            $invalidProperties[] = "invalid value for 'destination_currency_code', the character length must be bigger than or equal to 3.";
        }

        if ($this->container['fee'] === null) {
            $invalidProperties[] = "'fee' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['destination_token'] === null) {
            $invalidProperties[] = "'destination_token' can't be null";
        }
        $allowedValues = $this->getDeliveryTypeAllowableValues();
        if (!is_null($this->container['delivery_type']) && !in_array($this->container['delivery_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'delivery_type', must be one of '%s'",
                $this->container['delivery_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['client_transfer_id']) && (mb_strlen($this->container['client_transfer_id']) > 50)) {
            $invalidProperties[] = "invalid value for 'client_transfer_id', the character length must be smaller than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets token
     *
     * @return string
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string $token Token represnting the transaction
     *
     * @return self
     */
    public function setToken($token)
    {
        if (is_null($token)) {
            throw new \InvalidArgumentException('non-nullable token cannot be null');
        }
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Type of transaction
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets time_of_txn
     *
     * @return \DateTime
     */
    public function getTimeOfTxn()
    {
        return $this->container['time_of_txn'];
    }

    /**
     * Sets time_of_txn
     *
     * @param \DateTime $time_of_txn Time the transaction was created. In UTC
     *
     * @return self
     */
    public function setTimeOfTxn($time_of_txn)
    {
        if (is_null($time_of_txn)) {
            throw new \InvalidArgumentException('non-nullable time_of_txn cannot be null');
        }
        $this->container['time_of_txn'] = $time_of_txn;

        return $this;
    }

    /**
     * Gets source_amount
     *
     * @return float
     */
    public function getSourceAmount()
    {
        return $this->container['source_amount'];
    }

    /**
     * Sets source_amount
     *
     * @param float $source_amount Source amount
     *
     * @return self
     */
    public function setSourceAmount($source_amount)
    {
        if (is_null($source_amount)) {
            throw new \InvalidArgumentException('non-nullable source_amount cannot be null');
        }
        $this->container['source_amount'] = $source_amount;

        return $this;
    }

    /**
     * Gets source_currency_code
     *
     * @return string
     */
    public function getSourceCurrencyCode()
    {
        return $this->container['source_currency_code'];
    }

    /**
     * Sets source_currency_code
     *
     * @param string $source_currency_code The currency originating balance is stored in. Using [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) format. In most cases this value will be USD, and therefore the defaut value if none is provided
     *
     * @return self
     */
    public function setSourceCurrencyCode($source_currency_code)
    {
        if (is_null($source_currency_code)) {
            throw new \InvalidArgumentException('non-nullable source_currency_code cannot be null');
        }
        if ((mb_strlen($source_currency_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $source_currency_code when calling TxnHistoryResp., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($source_currency_code) < 3)) {
            throw new \InvalidArgumentException('invalid length for $source_currency_code when calling TxnHistoryResp., must be bigger than or equal to 3.');
        }

        $this->container['source_currency_code'] = $source_currency_code;

        return $this;
    }

    /**
     * Gets destination_amount
     *
     * @return float
     */
    public function getDestinationAmount()
    {
        return $this->container['destination_amount'];
    }

    /**
     * Sets destination_amount
     *
     * @param float $destination_amount The amount that was received in `destination_currency_code`
     *
     * @return self
     */
    public function setDestinationAmount($destination_amount)
    {
        if (is_null($destination_amount)) {
            throw new \InvalidArgumentException('non-nullable destination_amount cannot be null');
        }
        $this->container['destination_amount'] = $destination_amount;

        return $this;
    }

    /**
     * Gets destination_currency_code
     *
     * @return string
     */
    public function getDestinationCurrencyCode()
    {
        return $this->container['destination_currency_code'];
    }

    /**
     * Sets destination_currency_code
     *
     * @param string $destination_currency_code The currency of the funds received. Using [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) format
     *
     * @return self
     */
    public function setDestinationCurrencyCode($destination_currency_code)
    {
        if (is_null($destination_currency_code)) {
            throw new \InvalidArgumentException('non-nullable destination_currency_code cannot be null');
        }
        if ((mb_strlen($destination_currency_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $destination_currency_code when calling TxnHistoryResp., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($destination_currency_code) < 3)) {
            throw new \InvalidArgumentException('invalid length for $destination_currency_code when calling TxnHistoryResp., must be bigger than or equal to 3.');
        }

        $this->container['destination_currency_code'] = $destination_currency_code;

        return $this;
    }

    /**
     * Gets fee
     *
     * @return float
     */
    public function getFee()
    {
        return $this->container['fee'];
    }

    /**
     * Sets fee
     *
     * @param float $fee Fee of the transaction
     *
     * @return self
     */
    public function setFee($fee)
    {
        if (is_null($fee)) {
            throw new \InvalidArgumentException('non-nullable fee cannot be null');
        }
        $this->container['fee'] = $fee;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Status of the transaction
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes Notes of the transaction when load or spend back
     *
     * @return self
     */
    public function setNotes($notes)
    {
        if (is_null($notes)) {
            throw new \InvalidArgumentException('non-nullable notes cannot be null');
        }
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets payer_name
     *
     * @return string|null
     */
    public function getPayerName()
    {
        return $this->container['payer_name'];
    }

    /**
     * Sets payer_name
     *
     * @param string|null $payer_name Name of the payer when payout transaction
     *
     * @return self
     */
    public function setPayerName($payer_name)
    {
        if (is_null($payer_name)) {
            throw new \InvalidArgumentException('non-nullable payer_name cannot be null');
        }
        $this->container['payer_name'] = $payer_name;

        return $this;
    }

    /**
     * Gets pickup_code
     *
     * @return string|null
     */
    public function getPickupCode()
    {
        return $this->container['pickup_code'];
    }

    /**
     * Sets pickup_code
     *
     * @param string|null $pickup_code Code/pin that is required when collecting the money when payout transaction
     *
     * @return self
     */
    public function setPickupCode($pickup_code)
    {
        if (is_null($pickup_code)) {
            throw new \InvalidArgumentException('non-nullable pickup_code cannot be null');
        }
        $this->container['pickup_code'] = $pickup_code;

        return $this;
    }

    /**
     * Gets source_token
     *
     * @return string|null
     */
    public function getSourceToken()
    {
        return $this->container['source_token'];
    }

    /**
     * Sets source_token
     *
     * @param string|null $source_token Token that represents the funding source i.e. bank account, wallet. 36 characters long
     *
     * @return self
     */
    public function setSourceToken($source_token)
    {
        if (is_null($source_token)) {
            throw new \InvalidArgumentException('non-nullable source_token cannot be null');
        }
        $this->container['source_token'] = $source_token;

        return $this;
    }

    /**
     * Gets destination_token
     *
     * @return string
     */
    public function getDestinationToken()
    {
        return $this->container['destination_token'];
    }

    /**
     * Sets destination_token
     *
     * @param string $destination_token Token that represents the payout destination i.e. Omnex->Brazil->Bank Deposit->Itau. To be retrieved from the #pricing callback. If not provided, the last destination that was used for this user will be used. 36 characters long
     *
     * @return self
     */
    public function setDestinationToken($destination_token)
    {
        if (is_null($destination_token)) {
            throw new \InvalidArgumentException('non-nullable destination_token cannot be null');
        }
        $this->container['destination_token'] = $destination_token;

        return $this;
    }

    /**
     * Gets delivery_type
     *
     * @return string|null
     */
    public function getDeliveryType()
    {
        return $this->container['delivery_type'];
    }

    /**
     * Sets delivery_type
     *
     * @param string|null $delivery_type The type of service. I.e. cash pickup, home delivery, etc. Only provided for payouts
     *
     * @return self
     */
    public function setDeliveryType($delivery_type)
    {
        if (is_null($delivery_type)) {
            throw new \InvalidArgumentException('non-nullable delivery_type cannot be null');
        }
        $allowedValues = $this->getDeliveryTypeAllowableValues();
        if (!in_array($delivery_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'delivery_type', must be one of '%s'",
                    $delivery_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['delivery_type'] = $delivery_type;

        return $this;
    }

    /**
     * Gets client_transfer_id
     *
     * @return string|null
     */
    public function getClientTransferId()
    {
        return $this->container['client_transfer_id'];
    }

    /**
     * Sets client_transfer_id
     *
     * @param string|null $client_transfer_id A client defined transfer identifier. This is the unique ID assigned to the transfer on your system. Max 50 characters.
     *
     * @return self
     */
    public function setClientTransferId($client_transfer_id)
    {
        if (is_null($client_transfer_id)) {
            throw new \InvalidArgumentException('non-nullable client_transfer_id cannot be null');
        }
        if ((mb_strlen($client_transfer_id) > 50)) {
            throw new \InvalidArgumentException('invalid length for $client_transfer_id when calling TxnHistoryResp., must be smaller than or equal to 50.');
        }

        $this->container['client_transfer_id'] = $client_transfer_id;

        return $this;
    }

    /**
     * Gets status_reason
     *
     * @return string|null
     */
    public function getStatusReason()
    {
        return $this->container['status_reason'];
    }

    /**
     * Sets status_reason
     *
     * @param string|null $status_reason The reason for the status change. Usually would include reason for an ERROR or CANCEL status
     *
     * @return self
     */
    public function setStatusReason($status_reason)
    {
        if (is_null($status_reason)) {
            throw new \InvalidArgumentException('non-nullable status_reason cannot be null');
        }
        $this->container['status_reason'] = $status_reason;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return int|null
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param int|null $client_id Optional client id
     *
     * @return self
     */
    public function setClientId($client_id)
    {
        if (is_null($client_id)) {
            throw new \InvalidArgumentException('non-nullable client_id cannot be null');
        }
        $this->container['client_id'] = $client_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


